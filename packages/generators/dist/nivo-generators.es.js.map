{"version":3,"file":"nivo-generators.es.js","sources":["../src/color.ts","../src/sets/countryCodes.ts","../src/sets/names.ts","../src/sets/programmingLanguages.ts","../src/bullet.ts","../src/chord.ts","../src/network.ts","../src/parallelCoordinates.ts","../src/sankey.ts","../src/swarmplot.ts","../src/xySeries.ts","../src/index.ts"],"sourcesContent":["export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './xySeries'\n"],"names":["randColor","Math","round","random","countryCodes","names","programmingLanguages","generateBulletData","id","max","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","range","reduce","acc","remaining","measures","length","markers","map","generateChordData","keys","size","minValue","maxValue","maxSize","min","selectedKeys","slice","matrix","generateNetworkData","rootSize","midSize","leafSize","minMidNodes","maxMidNodes","minLeaves","maxLeaves","rootNode","height","color","nodes","Array","from","_","k","links","extraNodes","forEach","source","push","target","distance","concat","generateParallelCoordinatesData","key","shuffle","value","undefined","availableNodes","name","getNodeTargets","currentPath","targets","filter","Error","includes","join","targetId","getNodesTargets","targetsById","link","generateSankeyData","nodeCount","maxIterations","node","Object","assign","nodeColor","randId","n","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","groups","categoryCount","data","group","groupIndex","price","index","datum","volume","categories","randomizeSwarmPlotData","previousData","d","getValueGenerator","config","generator","values","generateXYSeries","serieIds","x","y","xLength","getX","getY","serieId","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","language","label","uniqRand","used","randCountryCode","generateDrinkStats","xSize","types","country","find","generateSerie","generateSeries","ids","xKeys","generateStackData","v","i","generateCountriesPopulation","countryCode","population","generateOrderedDayCounts","to","days","timeDays","dayFormat","timeFormat","day","generateDayCounts","generateCountriesData","withColors","libTreeItems","generateLibTree","children","tree","leaf","loc","wines","wineTastes","generateWinesTastes","randMin","randMax","taste","wine"],"mappings":"sKAAO,IAAMA,EAAY,wBAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,yBCAzCC,EAAe,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KA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"}