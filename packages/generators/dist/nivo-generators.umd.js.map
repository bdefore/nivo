{"version":3,"file":"nivo-generators.umd.js","sources":["../src/color.ts","../src/sets/countryCodes.ts","../src/sets/names.ts","../src/sets/programmingLanguages.ts","../src/sankey.ts","../src/swarmplot.ts","../src/xySeries.ts","../src/index.ts","../src/bullet.ts","../src/chord.ts","../src/network.ts","../src/parallelCoordinates.ts"],"sourcesContent":["export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './xySeries'\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\nimport range from 'lodash/range'\nimport shuffle from 'lodash/shuffle'\n\ntype Options = Partial<{\n    size: number\n    keys: Array<{\n        key: string\n        random?: [number, number]\n        shuffle?: string[]\n    }>\n}>\n\nexport const generateParallelCoordinatesData = ({\n    size = 26,\n    keys = [\n        { key: 'temp', random: [-10, 40] },\n        { key: 'cost', random: [200, 400000] },\n        { key: 'color', shuffle: ['red', 'yellow', 'green'] },\n        { key: 'target', shuffle: ['A', 'B', 'C', 'D', 'E'] },\n        { key: 'volume', random: [0.2, 7.6] },\n    ],\n}: Options = {}) => {\n    const datumGenerator = () =>\n        keys.reduce((acc, key) => {\n            let value\n            if (key.random !== undefined) {\n                value = random(...key.random)\n            } else if (key.shuffle !== undefined) {\n                value = shuffle(key.shuffle)[0]\n            }\n\n            return { ...acc, [key.key]: value }\n        }, {})\n\n    return range(size).map(datumGenerator)\n}\n"],"names":["randColor","Math","round","random","countryCodes","names","programmingLanguages","availableNodes","map","name","id","getNodeTargets","links","currentPath","targets","filter","source","target","Error","includes","join","reduce","acc","targetId","concat","getNodesTargets","targetsById","link","randomPrice","randomVolume","randomCategory","getValueGenerator","config","generator","index","values","value","min","max","color","uniqRand","used","push","randCountryCode","shuffle","sets","generateSerie","xSize","range","generateOrderedDayCounts","from","to","days","timeDays","dayFormat","timeFormat","day","libTreeItems","wines","wineTastes","title","subtitle","rangeCount","measureCount","markerCount","float","ranges","remaining","measures","length","markers","keys","size","minValue","maxValue","maxSize","selectedKeys","slice","matrix","withColors","country","d","forEach","key","countryCode","population","types","data","x","find","y","generateLibTree","limit","children","tree","_","i","leaf","loc","rootSize","midSize","leafSize","minMidNodes","maxMidNodes","minLeaves","maxLeaves","rootNode","height","nodes","Array","k","extraNodes","distance","undefined","shouldShuffle","langs","language","label","nodeCount","maxIterations","node","Object","assign","nodeColor","randId","n","ids","xKeys","v","groups","categoryCount","group","groupIndex","price","datum","volume","categories","randMin","randMax","taste","wine","serieIds","xLength","getX","getY","serieId","previousData"],"mappings":"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"}