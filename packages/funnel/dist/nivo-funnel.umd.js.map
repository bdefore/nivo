{"version":3,"file":"nivo-funnel.umd.js","sources":["../src/props.tsx","../src/PartTooltip.tsx","../src/hooks.ts","../src/Part.tsx","../src/Parts.tsx","../src/PartLabel.tsx","../src/PartLabels.tsx","../src/Separator.tsx","../src/Separators.tsx","../src/FunnelAnnotations.tsx","../src/Funnel.tsx","../src/ResponsiveFunnel.tsx"],"sourcesContent":["// @ts-ignore\nimport { MotionConfigProvider } from '@nivo/core'\nimport { FunnelLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['separators', 'parts', 'labels', 'annotations'] as FunnelLayerId[],\n\n    direction: 'vertical' as const,\n    interpolation: 'smooth' as const,\n    spacing: 0,\n    shapeBlending: 0.66,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 1,\n\n    borderWidth: 6,\n    borderColor: { from: 'color' },\n    borderOpacity: 0.66,\n\n    enableLabel: true,\n    labelColor: { theme: 'background' },\n\n    enableBeforeSeparators: true,\n    beforeSeparatorLength: 0,\n    beforeSeparatorOffset: 0,\n    enableAfterSeparators: true,\n    afterSeparatorLength: 0,\n    afterSeparatorOffset: 0,\n\n    annotations: [],\n\n    isInteractive: true,\n    currentPartSizeExtension: 0,\n\n    role: 'img',\n\n    animate: MotionConfigProvider.defaultProps.animate,\n    motionConfig: MotionConfigProvider.defaultProps.config,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { FunnelDatum, FunnelPartWithHandlers } from './types'\n\nexport interface PartTooltipProps<D extends FunnelDatum> {\n    part: FunnelPartWithHandlers<D>\n}\n\nexport const PartTooltip = <D extends FunnelDatum>({ part }: PartTooltipProps<D>) => (\n    <BasicTooltip\n        id={part.data.label}\n        value={part.formattedValue}\n        color={part.color}\n        enableChip={true}\n    />\n)\n","import { createElement, useMemo, useState, MouseEvent } from 'react'\nimport { line, area, curveBasis, curveLinear } from 'd3-shape'\nimport { ScaleLinear, scaleLinear } from 'd3-scale'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { useTheme, useValueFormatter } from '@nivo/core'\nimport { useAnnotations } from '@nivo/annotations'\nimport { useTooltip, TooltipActionsContextData } from '@nivo/tooltip'\nimport { svgDefaultProps as defaults } from './props'\nimport { PartTooltip, PartTooltipProps } from './PartTooltip'\nimport {\n    FunnelDatum,\n    FunnelCommonProps,\n    FunnelDataProps,\n    FunnelPart,\n    SeparatorProps,\n    FunnelCustomLayerProps,\n    FunnelAreaGenerator,\n    FunnelAreaPoint,\n    FunnelBorderGenerator,\n    Position,\n} from './types'\n\nexport const computeShapeGenerators = <D extends FunnelDatum>(\n    interpolation: FunnelCommonProps<D>['interpolation'],\n    direction: FunnelCommonProps<D>['direction']\n): [FunnelAreaGenerator, FunnelBorderGenerator] => {\n    // area generator which is used to draw funnel chart parts\n    const areaGenerator: FunnelAreaGenerator = area<FunnelAreaPoint>()\n    if (direction === 'vertical') {\n        areaGenerator\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n            .x0(d => d.x0)\n            .x1(d => d.x1)\n            .y(d => d.y)\n    } else {\n        areaGenerator\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n            .y0(d => d.y0)\n            .y1(d => d.y1)\n            .x(d => d.x)\n    }\n\n    return [\n        areaGenerator,\n        // we're using a different line generator to draw borders, this way\n        // we we don't have borders joining each side of the parts.\n        // it's important to have an empty point when defining the points\n        // to be used along with this, otherwise we'll get a line between both sides.\n        line<Position | null>()\n            .defined(d => d !== null)\n            .x(d => d!.x)\n            .y(d => d!.y)\n            .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n    ]\n}\n\ninterface CustomBandScale {\n    (index: number): number\n    bandwidth: number\n}\n\nexport const computeScales = <D extends FunnelDatum>({\n    data,\n    direction,\n    width,\n    height,\n    spacing,\n}: {\n    data: FunnelDataProps<D>['data']\n    direction: FunnelCommonProps<D>['direction']\n    width: number\n    height: number\n    spacing: number\n}): [CustomBandScale, ScaleLinear<number, number>] => {\n    let bandScaleSize\n    let linearScaleSize\n    if (direction === 'vertical') {\n        bandScaleSize = height\n        linearScaleSize = width\n    } else {\n        bandScaleSize = width\n        linearScaleSize = height\n    }\n\n    const bandwidth = (bandScaleSize - spacing * (data.length - 1)) / data.length\n\n    // we're not using d3 band scale here to be able to get\n    // the actual paddingInner value in pixels, required to\n    // create centered separator lines between parts\n    const bandScale = (index: number) => spacing * index + bandwidth * index\n    bandScale.bandwidth = bandwidth\n\n    const allValues = data.map(d => d.value)\n\n    const linearScale = scaleLinear()\n        .domain([0, Math.max(...allValues)])\n        .range([0, linearScaleSize])\n\n    return [bandScale, linearScale]\n}\n\nexport const computeSeparators = <D extends FunnelDatum>({\n    parts,\n    direction,\n    width,\n    height,\n    spacing,\n    enableBeforeSeparators,\n    beforeSeparatorOffset,\n    enableAfterSeparators,\n    afterSeparatorOffset,\n}: {\n    parts: FunnelPart<D>[]\n    direction: FunnelCommonProps<D>['direction']\n    width: number\n    height: number\n    spacing: number\n    enableBeforeSeparators: boolean\n    beforeSeparatorOffset: number\n    enableAfterSeparators: boolean\n    afterSeparatorOffset: number\n}) => {\n    const beforeSeparators: SeparatorProps[] = []\n    const afterSeparators: SeparatorProps[] = []\n    const lastPart = parts[parts.length - 1]\n\n    if (direction === 'vertical') {\n        parts.forEach(part => {\n            const y = part.y0 - spacing / 2\n\n            if (enableBeforeSeparators) {\n                beforeSeparators.push({\n                    partId: part.data.id,\n                    x0: 0,\n                    x1: part.x0 - beforeSeparatorOffset,\n                    y0: y,\n                    y1: y,\n                })\n            }\n            if (enableAfterSeparators) {\n                afterSeparators.push({\n                    partId: part.data.id,\n                    x0: part.x1 + afterSeparatorOffset,\n                    x1: width,\n                    y0: y,\n                    y1: y,\n                })\n            }\n        })\n\n        const y = lastPart.y1\n        if (enableBeforeSeparators) {\n            beforeSeparators.push({\n                ...beforeSeparators[beforeSeparators.length - 1],\n                partId: 'none',\n                y0: y,\n                y1: y,\n            })\n        }\n        if (enableAfterSeparators) {\n            afterSeparators.push({\n                ...afterSeparators[afterSeparators.length - 1],\n                partId: 'none',\n                y0: y,\n                y1: y,\n            })\n        }\n    } else if (direction === 'horizontal') {\n        parts.forEach(part => {\n            const x = part.x0 - spacing / 2\n\n            beforeSeparators.push({\n                partId: part.data.id,\n                x0: x,\n                x1: x,\n                y0: 0,\n                y1: part.y0 - beforeSeparatorOffset,\n            })\n            afterSeparators.push({\n                partId: part.data.id,\n                x0: x,\n                x1: x,\n                y0: part.y1 + afterSeparatorOffset,\n                y1: height,\n            })\n        })\n\n        const x = lastPart.x1\n        beforeSeparators.push({\n            ...beforeSeparators[beforeSeparators.length - 1],\n            partId: 'none',\n            x0: x,\n            x1: x,\n        })\n        afterSeparators.push({\n            ...afterSeparators[afterSeparators.length - 1],\n            partId: 'none',\n            x0: x,\n            x1: x,\n        })\n    }\n\n    return [beforeSeparators, afterSeparators]\n}\n\nexport const computePartsHandlers = <D extends FunnelDatum>({\n    parts,\n    setCurrentPartId,\n    isInteractive,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    onClick,\n    showTooltipFromEvent,\n    hideTooltip,\n    tooltip = PartTooltip,\n}: {\n    parts: FunnelPart<D>[]\n    setCurrentPartId: (id: string | number | null) => void\n    isInteractive: FunnelCommonProps<D>['isInteractive']\n    onMouseEnter?: FunnelCommonProps<D>['onMouseEnter']\n    onMouseLeave?: FunnelCommonProps<D>['onMouseLeave']\n    onMouseMove?: FunnelCommonProps<D>['onMouseMove']\n    onClick?: FunnelCommonProps<D>['onClick']\n    showTooltipFromEvent: TooltipActionsContextData['showTooltipFromEvent']\n    hideTooltip: () => void\n    tooltip?: (props: PartTooltipProps<D>) => JSX.Element\n}) => {\n    if (!isInteractive) return parts\n\n    return parts.map(part => {\n        const boundOnMouseEnter = (event: MouseEvent) => {\n            setCurrentPartId(part.data.id)\n            showTooltipFromEvent(createElement(tooltip, { part }), event)\n            onMouseEnter !== undefined && onMouseEnter(part, event)\n        }\n\n        const boundOnMouseLeave = (event: MouseEvent) => {\n            setCurrentPartId(null)\n            hideTooltip()\n            onMouseLeave !== undefined && onMouseLeave(part, event)\n        }\n\n        const boundOnMouseMove = (event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { part }), event)\n            onMouseMove !== undefined && onMouseMove(part, event)\n        }\n\n        const boundOnClick =\n            onClick !== undefined\n                ? (event: MouseEvent) => {\n                      onClick(part, event)\n                  }\n                : undefined\n\n        return {\n            ...part,\n            onMouseEnter: boundOnMouseEnter,\n            onMouseLeave: boundOnMouseLeave,\n            onMouseMove: boundOnMouseMove,\n            onClick: boundOnClick,\n        }\n    })\n}\n\n/**\n * Creates required layout to generate a funnel chart,\n * it uses almost the same parameters as the Funnel component.\n *\n * For purpose/constrains on the parameters, please have a look\n * at the component's props.\n */\nexport const useFunnel = <D extends FunnelDatum>({\n    data,\n    width,\n    height,\n    direction = defaults.direction,\n    interpolation = defaults.interpolation,\n    spacing = defaults.spacing,\n    shapeBlending: rawShapeBlending = defaults.shapeBlending,\n    valueFormat,\n    colors = defaults.colors,\n    fillOpacity = defaults.fillOpacity,\n    borderWidth = defaults.borderWidth,\n    borderColor = defaults.borderColor,\n    borderOpacity = defaults.borderOpacity,\n    labelColor = defaults.labelColor,\n    enableBeforeSeparators = defaults.enableBeforeSeparators,\n    beforeSeparatorLength = defaults.beforeSeparatorLength,\n    beforeSeparatorOffset = defaults.beforeSeparatorOffset,\n    enableAfterSeparators = defaults.enableAfterSeparators,\n    afterSeparatorLength = defaults.afterSeparatorLength,\n    afterSeparatorOffset = defaults.afterSeparatorOffset,\n    isInteractive = defaults.isInteractive,\n    currentPartSizeExtension = defaults.currentPartSizeExtension,\n    currentBorderWidth,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: {\n    data: FunnelDataProps<D>['data']\n    width: number\n    height: number\n    direction?: FunnelCommonProps<D>['direction']\n    interpolation?: FunnelCommonProps<D>['interpolation']\n    spacing?: FunnelCommonProps<D>['spacing']\n    shapeBlending?: FunnelCommonProps<D>['shapeBlending']\n    valueFormat?: FunnelCommonProps<D>['valueFormat']\n    colors?: FunnelCommonProps<D>['colors']\n    fillOpacity?: FunnelCommonProps<D>['fillOpacity']\n    borderWidth?: FunnelCommonProps<D>['borderWidth']\n    borderColor?: FunnelCommonProps<D>['borderColor']\n    borderOpacity?: FunnelCommonProps<D>['borderOpacity']\n    labelColor?: FunnelCommonProps<D>['labelColor']\n    enableBeforeSeparators?: FunnelCommonProps<D>['enableBeforeSeparators']\n    beforeSeparatorLength?: FunnelCommonProps<D>['beforeSeparatorLength']\n    beforeSeparatorOffset?: FunnelCommonProps<D>['beforeSeparatorOffset']\n    enableAfterSeparators?: FunnelCommonProps<D>['enableAfterSeparators']\n    afterSeparatorLength?: FunnelCommonProps<D>['afterSeparatorLength']\n    afterSeparatorOffset?: FunnelCommonProps<D>['afterSeparatorOffset']\n    isInteractive?: FunnelCommonProps<D>['isInteractive']\n    currentPartSizeExtension?: FunnelCommonProps<D>['currentPartSizeExtension']\n    currentBorderWidth?: FunnelCommonProps<D>['currentBorderWidth']\n    onMouseEnter?: FunnelCommonProps<D>['onMouseEnter']\n    onMouseMove?: FunnelCommonProps<D>['onMouseMove']\n    onMouseLeave?: FunnelCommonProps<D>['onMouseLeave']\n    onClick?: FunnelCommonProps<D>['onClick']\n    tooltip?: (props: PartTooltipProps<D>) => JSX.Element\n}) => {\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<D>(colors, 'id')\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getLabelColor = useInheritedColor(labelColor, theme)\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const [areaGenerator, borderGenerator] = useMemo(\n        () => computeShapeGenerators<D>(interpolation, direction),\n        [interpolation, direction]\n    )\n\n    let innerWidth: number\n    let innerHeight: number\n    const paddingBefore = enableBeforeSeparators ? beforeSeparatorLength + beforeSeparatorOffset : 0\n    const paddingAfter = enableAfterSeparators ? afterSeparatorLength + afterSeparatorOffset : 0\n    if (direction === 'vertical') {\n        innerWidth = width - paddingBefore - paddingAfter\n        innerHeight = height\n    } else {\n        innerWidth = width\n        innerHeight = height - paddingBefore - paddingAfter\n    }\n\n    const [bandScale, linearScale] = useMemo(\n        () =>\n            computeScales<D>({\n                data,\n                direction,\n                width: innerWidth,\n                height: innerHeight,\n                spacing,\n            }),\n        [data, direction, innerWidth, innerHeight, spacing]\n    )\n\n    const [currentPartId, setCurrentPartId] = useState<string | number | null>(null)\n\n    const parts: FunnelPart<D>[] = useMemo(() => {\n        const enhancedParts = data.map((datum, index) => {\n            const isCurrent = datum.id === currentPartId\n\n            let partWidth\n            let partHeight\n            let y0, x0\n\n            if (direction === 'vertical') {\n                partWidth = linearScale(datum.value)\n                partHeight = bandScale.bandwidth\n                x0 = paddingBefore + (innerWidth - partWidth) * 0.5\n                y0 = bandScale(index)\n            } else {\n                partWidth = bandScale.bandwidth\n                partHeight = linearScale(datum.value)\n                x0 = bandScale(index)\n                y0 = paddingBefore + (innerHeight - partHeight) * 0.5\n            }\n\n            const x1 = x0 + partWidth\n            const x = x0 + partWidth * 0.5\n            const y1 = y0 + partHeight\n            const y = y0 + partHeight * 0.5\n\n            const part: FunnelPart<D> = {\n                data: datum,\n                width: partWidth,\n                height: partHeight,\n                color: getColor(datum),\n                fillOpacity,\n                borderWidth:\n                    isCurrent && currentBorderWidth !== undefined\n                        ? currentBorderWidth\n                        : borderWidth,\n                borderOpacity,\n                formattedValue: formatValue(datum.value),\n                isCurrent,\n                x,\n                x0,\n                x1,\n                y,\n                y0,\n                y1,\n                borderColor: '',\n                labelColor: '',\n                points: [],\n                areaPoints: [],\n                borderPoints: [],\n            }\n\n            part.borderColor = getBorderColor(part)\n            part.labelColor = getLabelColor(part)\n\n            return part\n        })\n\n        const shapeBlending = rawShapeBlending / 2\n\n        enhancedParts.forEach((part, index) => {\n            const nextPart = enhancedParts[index + 1]\n\n            if (direction === 'vertical') {\n                part.points.push({ x: part.x0, y: part.y0 })\n                part.points.push({ x: part.x1, y: part.y0 })\n                if (nextPart) {\n                    part.points.push({ x: nextPart.x1, y: part.y1 })\n                    part.points.push({ x: nextPart.x0, y: part.y1 })\n                } else {\n                    part.points.push({ x: part.points[1].x, y: part.y1 })\n                    part.points.push({ x: part.points[0].x, y: part.y1 })\n                }\n                if (part.isCurrent) {\n                    part.points[0].x -= currentPartSizeExtension\n                    part.points[1].x += currentPartSizeExtension\n                    part.points[2].x += currentPartSizeExtension\n                    part.points[3].x -= currentPartSizeExtension\n                }\n\n                part.areaPoints = [\n                    {\n                        x: 0,\n                        x0: part.points[0].x,\n                        x1: part.points[1].x,\n                        y: part.y0,\n                        y0: 0,\n                        y1: 0,\n                    },\n                ]\n                part.areaPoints.push({\n                    ...part.areaPoints[0],\n                    y: part.y0 + part.height * shapeBlending,\n                })\n                const lastAreaPoint = {\n                    x: 0,\n                    x0: part.points[3].x,\n                    x1: part.points[2].x,\n                    y: part.y1,\n                    y0: 0,\n                    y1: 0,\n                }\n                part.areaPoints.push({\n                    ...lastAreaPoint,\n                    y: part.y1 - part.height * shapeBlending,\n                })\n                part.areaPoints.push(lastAreaPoint)\n                ;[0, 1, 2, 3].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x0,\n                        y: part.areaPoints[index].y,\n                    })\n                })\n                part.borderPoints.push(null)\n                ;[3, 2, 1, 0].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x1,\n                        y: part.areaPoints[index].y,\n                    })\n                })\n            } else {\n                part.points.push({ x: part.x0, y: part.y0 })\n                if (nextPart) {\n                    part.points.push({ x: part.x1, y: nextPart.y0 })\n                    part.points.push({ x: part.x1, y: nextPart.y1 })\n                } else {\n                    part.points.push({ x: part.x1, y: part.y0 })\n                    part.points.push({ x: part.x1, y: part.y1 })\n                }\n                part.points.push({ x: part.x0, y: part.y1 })\n                if (part.isCurrent) {\n                    part.points[0].y -= currentPartSizeExtension\n                    part.points[1].y -= currentPartSizeExtension\n                    part.points[2].y += currentPartSizeExtension\n                    part.points[3].y += currentPartSizeExtension\n                }\n\n                part.areaPoints = [\n                    {\n                        x: part.x0,\n                        x0: 0,\n                        x1: 0,\n                        y: 0,\n                        y0: part.points[0].y,\n                        y1: part.points[3].y,\n                    },\n                ]\n                part.areaPoints.push({\n                    ...part.areaPoints[0],\n                    x: part.x0 + part.width * shapeBlending,\n                })\n                const lastAreaPoint = {\n                    x: part.x1,\n                    x0: 0,\n                    x1: 0,\n                    y: 0,\n                    y0: part.points[1].y,\n                    y1: part.points[2].y,\n                }\n                part.areaPoints.push({\n                    ...lastAreaPoint,\n                    x: part.x1 - part.width * shapeBlending,\n                })\n                part.areaPoints.push(lastAreaPoint)\n                ;[0, 1, 2, 3].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x,\n                        y: part.areaPoints[index].y0,\n                    })\n                })\n                part.borderPoints.push(null)\n                ;[3, 2, 1, 0].map(index => {\n                    part.borderPoints.push({\n                        x: part.areaPoints[index].x,\n                        y: part.areaPoints[index].y1,\n                    })\n                })\n            }\n        })\n\n        return enhancedParts\n    }, [\n        data,\n        direction,\n        linearScale,\n        bandScale,\n        innerWidth,\n        innerHeight,\n        paddingBefore,\n        paddingAfter,\n        rawShapeBlending,\n        getColor,\n        formatValue,\n        getBorderColor,\n        getLabelColor,\n        currentPartId,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const partsWithHandlers = useMemo(\n        () =>\n            computePartsHandlers<D>({\n                parts,\n                setCurrentPartId,\n                isInteractive,\n                onMouseEnter,\n                onMouseLeave,\n                onMouseMove,\n                onClick,\n                showTooltipFromEvent,\n                hideTooltip,\n                tooltip,\n            }),\n        [\n            parts,\n            setCurrentPartId,\n            isInteractive,\n            onMouseEnter,\n            onMouseLeave,\n            onMouseMove,\n            onClick,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n        ]\n    )\n\n    const [beforeSeparators, afterSeparators] = useMemo(\n        () =>\n            computeSeparators({\n                parts,\n                direction,\n                width,\n                height,\n                spacing,\n                enableBeforeSeparators,\n                beforeSeparatorOffset,\n                enableAfterSeparators,\n                afterSeparatorOffset,\n            }),\n        [\n            parts,\n            direction,\n            width,\n            height,\n            spacing,\n            enableBeforeSeparators,\n            beforeSeparatorOffset,\n            enableAfterSeparators,\n            afterSeparatorOffset,\n        ]\n    )\n\n    const customLayerProps: FunnelCustomLayerProps<D> = useMemo(\n        () => ({\n            width,\n            height,\n            parts: partsWithHandlers,\n            areaGenerator,\n            borderGenerator,\n            beforeSeparators,\n            afterSeparators,\n            setCurrentPartId,\n        }),\n        [\n            width,\n            height,\n            partsWithHandlers,\n            areaGenerator,\n            borderGenerator,\n            beforeSeparators,\n            afterSeparators,\n            setCurrentPartId,\n        ]\n    )\n\n    return {\n        parts: partsWithHandlers,\n        areaGenerator,\n        borderGenerator,\n        beforeSeparators,\n        afterSeparators,\n        setCurrentPartId,\n        currentPartId,\n        customLayerProps,\n    }\n}\n\nexport const useFunnelAnnotations = <D extends FunnelDatum>(\n    parts: FunnelPart<D>[],\n    annotations: FunnelCommonProps<D>['annotations']\n) =>\n    useAnnotations<FunnelPart<D>>({\n        data: parts,\n        annotations,\n        getPosition: part => ({\n            x: part.x,\n            y: part.y,\n        }),\n        getDimensions: (part: FunnelPart<D>) => {\n            const width = part.width\n            const height = part.height\n\n            return { size: Math.max(width, height), width, height }\n        },\n    })\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport {\n    FunnelDatum,\n    FunnelPartWithHandlers,\n    FunnelAreaGenerator,\n    FunnelBorderGenerator,\n} from './types'\n\nexport interface PartProps<D extends FunnelDatum> {\n    part: FunnelPartWithHandlers<D>\n    areaGenerator: FunnelAreaGenerator\n    borderGenerator: FunnelBorderGenerator\n}\n\nexport const Part = <D extends FunnelDatum>({\n    part,\n    areaGenerator,\n    borderGenerator,\n}: PartProps<D>) => {\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedAreaPath = useAnimatedPath(areaGenerator(part.areaPoints) as string)\n    const animatedBorderPath = useAnimatedPath(borderGenerator(part.borderPoints) as string)\n    const animatedProps = useSpring({\n        areaColor: part.color,\n        borderWidth: part.borderWidth,\n        borderColor: part.borderColor,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {part.borderWidth > 0 && (\n                <animated.path\n                    d={animatedBorderPath}\n                    stroke={animatedProps.borderColor}\n                    strokeWidth={animatedProps.borderWidth}\n                    strokeOpacity={part.borderOpacity}\n                    fill=\"none\"\n                />\n            )}\n            <animated.path\n                d={animatedAreaPath}\n                fill={animatedProps.areaColor}\n                fillOpacity={part.fillOpacity}\n                onMouseEnter={part.onMouseEnter}\n                onMouseLeave={part.onMouseLeave}\n                onMouseMove={part.onMouseMove}\n                onClick={part.onClick}\n            />\n        </>\n    )\n}\n","import { Part } from './Part'\nimport {\n    FunnelPartWithHandlers,\n    FunnelAreaGenerator,\n    FunnelBorderGenerator,\n    FunnelDatum,\n} from './types'\n\ninterface PartsProps<D extends FunnelDatum> {\n    parts: FunnelPartWithHandlers<D>[]\n    areaGenerator: FunnelAreaGenerator\n    borderGenerator: FunnelBorderGenerator\n}\n\nexport const Parts = <D extends FunnelDatum>({\n    parts,\n    areaGenerator,\n    borderGenerator,\n}: PartsProps<D>) => (\n    <>\n        {parts.map(part => (\n            <Part<D>\n                key={part.data.id}\n                part={part}\n                areaGenerator={areaGenerator}\n                borderGenerator={borderGenerator}\n            />\n        ))}\n    </>\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface PartLabelProps<D extends FunnelDatum> {\n    part: FunnelPart<D>\n}\n\nexport const PartLabel = <D extends FunnelDatum>({ part }: PartLabelProps<D>) => {\n    const theme = useTheme()\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${part.x}, ${part.y})`,\n        color: part.labelColor,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: animatedProps.color,\n                    pointerEvents: 'none',\n                }}\n            >\n                {part.formattedValue}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { PartLabel } from './PartLabel'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface PartLabelsProps<D extends FunnelDatum> {\n    parts: FunnelPart<D>[]\n}\n\nexport const PartLabels = <D extends FunnelDatum>({ parts }: PartLabelsProps<D>) => (\n    <>\n        {parts.map(part => (\n            <PartLabel key={part.data.id} part={part} />\n        ))}\n    </>\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { SeparatorProps as SeparatorType } from './types'\n\ninterface SeparatorProps {\n    separator: SeparatorType\n}\n\nexport const Separator = ({ separator }: SeparatorProps) => {\n    const theme = useTheme()\n    const { animate, config: motionConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        x1: separator.x0,\n        x2: separator.x1,\n        y1: separator.y0,\n        y2: separator.y1,\n        config: motionConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.line\n            x1={animatedProps.x1}\n            x2={animatedProps.x2}\n            y1={animatedProps.y1}\n            y2={animatedProps.y2}\n            fill=\"none\"\n            {...(theme.grid.line as any)}\n        />\n    )\n}\n","import { Separator } from './Separator'\nimport { SeparatorProps as SeparatorType } from './types'\n\ninterface SeparatorsProps {\n    beforeSeparators: SeparatorType[]\n    afterSeparators: SeparatorType[]\n}\n\nexport const Separators = ({ beforeSeparators, afterSeparators }: SeparatorsProps) => (\n    <>\n        {beforeSeparators.map(separator => (\n            <Separator key={separator.partId} separator={separator} />\n        ))}\n        {afterSeparators.map(separator => (\n            <Separator key={separator.partId} separator={separator} />\n        ))}\n    </>\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useFunnelAnnotations } from './hooks'\nimport { FunnelDatum, FunnelPart } from './types'\n\ninterface FunnelAnnotationsProps<D extends FunnelDatum> {\n    parts: FunnelPart<D>[]\n    annotations: any[]\n}\n\nexport const FunnelAnnotations = <D extends FunnelDatum>({\n    parts,\n    annotations,\n}: FunnelAnnotationsProps<D>) => {\n    const boundAnnotations = useFunnelAnnotations<D>(parts, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { SvgWrapper, Container, useDimensions } from '@nivo/core'\nimport { svgDefaultProps } from './props'\nimport { useFunnel } from './hooks'\nimport { Parts } from './Parts'\nimport { PartLabels } from './PartLabels'\nimport { Separators } from './Separators'\nimport { FunnelAnnotations } from './FunnelAnnotations'\nimport { FunnelDatum, FunnelLayerId, FunnelSvgProps } from './types'\n\ntype InnerFunnelProps<D extends FunnelDatum> = Omit<\n    FunnelSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerFunnel = <D extends FunnelDatum>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    direction = svgDefaultProps.direction,\n    interpolation = svgDefaultProps.interpolation,\n    spacing = svgDefaultProps.spacing,\n    shapeBlending = svgDefaultProps.shapeBlending,\n    valueFormat,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    borderOpacity = svgDefaultProps.borderOpacity,\n    enableLabel = svgDefaultProps.enableLabel,\n    labelColor = svgDefaultProps.labelColor,\n    enableBeforeSeparators = svgDefaultProps.enableBeforeSeparators,\n    beforeSeparatorLength = svgDefaultProps.beforeSeparatorLength,\n    beforeSeparatorOffset = svgDefaultProps.beforeSeparatorOffset,\n    enableAfterSeparators = svgDefaultProps.enableAfterSeparators,\n    afterSeparatorLength = svgDefaultProps.afterSeparatorLength,\n    afterSeparatorOffset = svgDefaultProps.afterSeparatorOffset,\n    layers = svgDefaultProps.layers,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    currentPartSizeExtension = svgDefaultProps.currentPartSizeExtension,\n    currentBorderWidth,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerFunnelProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        areaGenerator,\n        borderGenerator,\n        parts,\n        beforeSeparators,\n        afterSeparators,\n        customLayerProps,\n    } = useFunnel<D>({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        direction,\n        interpolation,\n        spacing,\n        shapeBlending,\n        valueFormat,\n        colors,\n        fillOpacity,\n        borderWidth,\n        borderColor,\n        borderOpacity,\n        labelColor,\n        enableBeforeSeparators,\n        beforeSeparatorLength,\n        beforeSeparatorOffset,\n        enableAfterSeparators,\n        afterSeparatorLength,\n        afterSeparatorOffset,\n        isInteractive,\n        currentPartSizeExtension,\n        currentBorderWidth,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    })\n\n    const layerById: Record<FunnelLayerId, ReactNode> = {\n        separators: null,\n        parts: null,\n        annotations: null,\n        labels: null,\n    }\n\n    if (layers.includes('separators')) {\n        layerById.separators = (\n            <Separators\n                key=\"separators\"\n                beforeSeparators={beforeSeparators}\n                afterSeparators={afterSeparators}\n            />\n        )\n    }\n\n    if (layers.includes('parts')) {\n        layerById.parts = (\n            <Parts<D>\n                key=\"parts\"\n                parts={parts}\n                areaGenerator={areaGenerator}\n                borderGenerator={borderGenerator}\n            />\n        )\n    }\n\n    if (layers?.includes('annotations')) {\n        layerById.annotations = (\n            <FunnelAnnotations<D> key=\"annotations\" parts={parts} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = <PartLabels<D> key=\"labels\" parts={parts} />\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Funnel = <D extends FunnelDatum = FunnelDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: FunnelSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerFunnel<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { FunnelDatum, FunnelSvgProps } from './types'\nimport { Funnel } from './Funnel'\n\nexport const ResponsiveFunnel = <D extends FunnelDatum = FunnelDatum>(\n    props: Omit<FunnelSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Funnel<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["svgDefaultProps","layers","direction","interpolation","spacing","shapeBlending","colors","scheme","fillOpacity","borderWidth","borderColor","from","borderOpacity","enableLabel","labelColor","theme","enableBeforeSeparators","beforeSeparatorLength","beforeSeparatorOffset","enableAfterSeparators","afterSeparatorLength","afterSeparatorOffset","annotations","isInteractive","currentPartSizeExtension","role","animate","MotionConfigProvider","defaultProps","motionConfig","config","PartTooltip","part","_jsx","BasicTooltip","id","data","label","value","formattedValue","color","enableChip","computeShapeGenerators","areaGenerator","area","curve","curveBasis","curveLinear","x0","d","x1","y","y0","y1","x","line","defined","computeScales","bandScaleSize","linearScaleSize","width","height","bandwidth","length","bandScale","index","allValues","map","scaleLinear","domain","Math","max","range","computeSeparators","parts","beforeSeparators","afterSeparators","lastPart","forEach","push","partId","computePartsHandlers","setCurrentPartId","onMouseEnter","onMouseLeave","onMouseMove","onClick","showTooltipFromEvent","hideTooltip","tooltip","event","createElement","undefined","useFunnel","innerWidth","innerHeight","defaults","rawShapeBlending","valueFormat","currentBorderWidth","useTheme","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","formatValue","useValueFormatter","useMemo","borderGenerator","paddingBefore","paddingAfter","linearScale","useState","currentPartId","enhancedParts","datum","partWidth","partHeight","isCurrent","points","areaPoints","borderPoints","nextPart","lastAreaPoint","useTooltip","partsWithHandlers","customLayerProps","useFunnelAnnotations","useAnnotations","getPosition","getDimensions","size","Part","useMotionConfig","animatedAreaPath","useAnimatedPath","animatedBorderPath","animatedProps","useSpring","areaColor","immediate","_jsxs","animated","path","stroke","strokeWidth","strokeOpacity","fill","Parts","PartLabel","transform","g","text","textAnchor","dominantBaseline","style","labels","pointerEvents","PartLabels","Separator","separator","x2","y2","grid","Separators","FunnelAnnotations","boundAnnotations","annotation","i","Annotation","InnerFunnel","partialMargin","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","outerWidth","outerHeight","layerById","separators","includes","SvgWrapper","layer","Fragment","Funnel","renderWrapper","otherProps","Container","props","ResponsiveWrapper"],"mappings":"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"}