{"version":3,"file":"nivo-radar.cjs.js","sources":["../src/RadarLayer.tsx","../src/RadarGridLabels.tsx","../src/RadarGridLevels.tsx","../src/RadarGrid.tsx","../src/RadarSlice.tsx","../src/RadarSlices.tsx","../src/RadarDots.tsx","../src/props.ts","../src/RadarGridLabel.tsx","../src/RadarSliceTooltip.tsx","../src/hooks.ts","../src/Radar.tsx","../src/ResponsiveRadar.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { lineRadial, CurveFactory } from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { useMotionConfig, useTheme, useAnimatedPath } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { RadarCommonProps } from './types'\n\ninterface RadarLayerProps<D extends Record<string, unknown>> {\n    data: D[]\n    item: string\n    colorByKey: Record<string | number, string>\n    fillByKey: Record<string, string | null>\n    radiusScale: ScaleLinear<number, number>\n    angleStep: number\n    curveFactory: CurveFactory\n    borderWidth: RadarCommonProps<D>['borderWidth']\n    borderColor: RadarCommonProps<D>['borderColor']\n    fillOpacity: RadarCommonProps<D>['fillOpacity']\n    blendMode: RadarCommonProps<D>['blendMode']\n}\n\nexport const RadarLayer = <D extends Record<string, unknown>>({\n    data,\n    item: key,\n    colorByKey,\n    fillByKey,\n    radiusScale,\n    angleStep,\n    curveFactory,\n    borderWidth,\n    borderColor,\n    fillOpacity,\n    blendMode,\n}: RadarLayerProps<D>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const lineGenerator = useMemo(() => {\n        return lineRadial<number>()\n            .radius(d => radiusScale(d))\n            .angle((_, i) => i * angleStep)\n            .curve(curveFactory)\n    }, [radiusScale, angleStep, curveFactory])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(data.map(d => d[key] as number)) as string)\n    const animatedProps = useSpring<{ fill: string; stroke: string }>({\n        fill: colorByKey[key],\n        stroke: getBorderColor({ key, color: colorByKey[key] }),\n        config: springConfig,\n        immediate: !animate,\n    })\n    const fill = fillByKey[key] ?? animatedProps.fill\n\n    return (\n        <animated.path\n            key={key}\n            d={animatedPath}\n            fill={fill}\n            fillOpacity={fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={borderWidth}\n            style={{ mixBlendMode: blendMode }}\n        />\n    )\n}\n","import { createElement } from 'react'\nimport { useSprings } from '@react-spring/web'\nimport { useMotionConfig, positionFromAngle, radiansToDegrees } from '@nivo/core'\nimport { GridLabelComponent } from './types'\n\nconst textAnchorFromAngle = (_angle: number) => {\n    const angle = radiansToDegrees(_angle) + 90\n\n    if (angle <= 10 || angle >= 350 || (angle >= 170 && angle <= 190)) return 'middle' as const\n    if (angle > 180) return 'end' as const\n    return 'start' as const\n}\n\ninterface RadarGridLabelsProps {\n    radius: number\n    angles: number[]\n    indices: string[]\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGridLabels = ({\n    radius,\n    angles,\n    indices,\n    label: labelComponent,\n    labelOffset,\n}: RadarGridLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = indices.map((index, i) => {\n        const position = positionFromAngle(angles[i], radius + labelOffset)\n        const textAnchor = textAnchorFromAngle(angles[i])\n\n        return {\n            id: index,\n            angle: radiansToDegrees(angles[i]),\n            anchor: textAnchor,\n            ...position,\n        }\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y})`,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return createElement(labelComponent, {\n                    key: label.id,\n                    id: label.id,\n                    anchor: label.anchor,\n                    angle: label.angle,\n                    x: label.x,\n                    y: label.y,\n                    animated: animatedProps,\n                })\n            })}\n        </>\n    )\n}\n","import { memo, SVGProps, useMemo } from 'react'\nimport { lineRadial, curveLinearClosed } from 'd3-shape'\nimport { animated, useSpring, to } from '@react-spring/web'\nimport { useTheme, useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { RadarCommonProps } from './types'\n\ninterface RadarGridLevelCircularProps {\n    radius: number\n}\n\nconst RadarGridLevelCircular = memo(({ radius }: RadarGridLevelCircularProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        radius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            fill=\"none\"\n            r={to(animatedProps.radius, value => Math.max(value, 0))}\n            {...(theme.grid.line as Omit<SVGProps<SVGCircleElement>, 'ref'>)}\n        />\n    )\n})\n\ninterface RadarGridLevelLinearProps {\n    radius: number\n    angleStep: number\n    dataLength: number\n}\n\nconst RadarGridLevelLinear = ({ radius, angleStep, dataLength }: RadarGridLevelLinearProps) => {\n    const theme = useTheme()\n\n    const radarLineGenerator = useMemo(\n        () =>\n            lineRadial<number>()\n                .angle(i => i * angleStep)\n                .radius(radius)\n                .curve(curveLinearClosed),\n        [angleStep, radius]\n    )\n\n    const points = Array.from({ length: dataLength }, (_, i) => i)\n    const animatedPath = useAnimatedPath(radarLineGenerator(points) as string)\n\n    return (\n        <animated.path\n            fill=\"none\"\n            d={animatedPath}\n            {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n        />\n    )\n}\n\ninterface RadarGridLevelsProps<D extends Record<string, unknown>> {\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    angleStep: number\n    dataLength: number\n}\n\nexport const RadarGridLevels = <D extends Record<string, unknown>>({\n    shape,\n    ...props\n}: RadarGridLevelsProps<D>) => {\n    return shape === 'circular' ? (\n        <RadarGridLevelCircular radius={props.radius} />\n    ) : (\n        <RadarGridLevelLinear {...props} />\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { RadarGridLabels } from './RadarGridLabels'\nimport { RadarGridLevels } from './RadarGridLevels'\nimport { GridLabelComponent, RadarCommonProps } from './types'\n\ninterface RadarGridProps<D extends Record<string, unknown>> {\n    indices: string[]\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    levels: number\n    angleStep: number\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGrid = <D extends Record<string, unknown>>({\n    indices,\n    levels,\n    shape,\n    radius,\n    angleStep,\n    label,\n    labelOffset,\n}: RadarGridProps<D>) => {\n    const theme = useTheme()\n    const { radii, angles } = useMemo(() => {\n        return {\n            radii: Array.from({ length: levels })\n                .map((_, i) => (radius / levels) * (i + 1))\n                .reverse(),\n            angles: Array.from({ length: indices.length }, (_, i) => i * angleStep - Math.PI / 2),\n        }\n    }, [indices, levels, radius, angleStep])\n\n    return (\n        <>\n            {angles.map((angle, i) => {\n                const position = positionFromAngle(angle, radius)\n                return (\n                    <line\n                        key={`axis.${i}`}\n                        x1={0}\n                        y1={0}\n                        x2={position.x}\n                        y2={position.y}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                )\n            })}\n            {radii.map((radius, i) => (\n                <RadarGridLevels<D>\n                    key={`level.${i}`}\n                    shape={shape}\n                    radius={radius}\n                    angleStep={angleStep}\n                    dataLength={indices.length}\n                />\n            ))}\n            <RadarGridLabels\n                radius={radius}\n                angles={angles}\n                indices={indices}\n                labelOffset={labelOffset}\n                label={label}\n            />\n        </>\n    )\n}\n","import { useMemo, useState, useCallback, createElement } from 'react'\nimport { Arc } from 'd3-shape'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { RadarCommonProps, RadarDataProps, RadarSliceTooltipDatum } from './types'\n\ninterface RadarSliceProps<D extends Record<string, unknown>> {\n    datum: D\n    keys: RadarDataProps<D>['keys']\n    index: string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: Record<string, string>\n    startAngle: number\n    endAngle: number\n    radius: number\n    arcGenerator: Arc<void, { startAngle: number; endAngle: number }>\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlice = <D extends Record<string, unknown>>({\n    datum,\n    keys,\n    index,\n    formatValue,\n    colorByKey,\n    radius,\n    startAngle,\n    endAngle,\n    arcGenerator,\n    tooltip,\n}: RadarSliceProps<D>) => {\n    const [isHover, setIsHover] = useState(false)\n    const theme = useTheme()\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const tooltipData = useMemo(() => {\n        const data: RadarSliceTooltipDatum[] = keys.map(key => ({\n            color: colorByKey[key],\n            id: key,\n            value: datum[key] as number,\n            formattedValue: formatValue(datum[key] as number, key),\n        }))\n        data.sort((a, b) => a.value - b.value)\n        data.reverse()\n\n        return data\n    }, [datum, keys, formatValue, colorByKey])\n\n    const showItemTooltip = useCallback(\n        event => {\n            setIsHover(true)\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    index,\n                    data: tooltipData,\n                }),\n                event\n            )\n        },\n        [showTooltipFromEvent, tooltip, index, tooltipData]\n    )\n\n    const hideItemTooltip = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [hideTooltip, setIsHover])\n\n    const { path, tipX, tipY } = useMemo(() => {\n        const position = positionFromAngle(\n            startAngle + (endAngle - startAngle) * 0.5 - Math.PI / 2,\n            radius\n        )\n\n        return {\n            path: arcGenerator({ startAngle, endAngle }) as string,\n            tipX: position.x,\n            tipY: position.y,\n        }\n    }, [startAngle, endAngle, radius, arcGenerator])\n\n    return (\n        <>\n            {isHover && <line x1={0} y1={0} x2={tipX} y2={tipY} style={theme.crosshair.line} />}\n            <path\n                d={path}\n                fill=\"#F00\"\n                fillOpacity={0}\n                onMouseEnter={showItemTooltip}\n                onMouseMove={showItemTooltip}\n                onMouseLeave={hideItemTooltip}\n            />\n        </>\n    )\n}\n","import { arc as d3Arc } from 'd3-shape'\nimport { RadarSlice } from './RadarSlice'\nimport { RadarColorMapping, RadarCommonProps, RadarDataProps } from './types'\n\ninterface RadarSlicesProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    getIndex: (d: D) => string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: RadarColorMapping\n    radius: number\n    angleStep: number\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlices = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    formatValue,\n    colorByKey,\n    radius,\n    angleStep,\n    tooltip,\n}: RadarSlicesProps<D>) => {\n    const arc = d3Arc<{ startAngle: number; endAngle: number }>().outerRadius(radius).innerRadius(0)\n\n    const halfAngleStep = angleStep * 0.5\n    let rootStartAngle = -halfAngleStep\n\n    return (\n        <>\n            {data.map(d => {\n                const index = getIndex(d)\n                const startAngle = rootStartAngle\n                const endAngle = startAngle + angleStep\n\n                rootStartAngle += angleStep\n\n                return (\n                    <RadarSlice\n                        key={index}\n                        datum={d}\n                        keys={keys}\n                        index={index}\n                        formatValue={formatValue}\n                        colorByKey={colorByKey}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        radius={radius}\n                        arcGenerator={arc}\n                        tooltip={tooltip}\n                    />\n                )\n            })}\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { ScaleLinear } from 'd3-scale'\nimport { useTheme, positionFromAngle, DotsItem, usePropertyAccessor } from '@nivo/core'\nimport { getInheritedColorGenerator } from '@nivo/colors'\nimport { RadarCommonProps, RadarDataProps, PointProps, PointData, RadarColorMapping } from './types'\n\ninterface RadarDotsProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    radiusScale: ScaleLinear<number, number>\n    getIndex: (d: D) => string\n    colorByKey: RadarColorMapping\n    angleStep: number\n    symbol?: RadarCommonProps<D>['dotSymbol']\n    size: number\n    color: RadarCommonProps<D>['dotColor']\n    borderWidth: number\n    borderColor: RadarCommonProps<D>['dotBorderColor']\n    enableLabel: boolean\n    label: RadarCommonProps<D>['dotLabel']\n    formatValue: (value: number, context: string) => string\n    labelYOffset: number\n}\n\nexport const RadarDots = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    colorByKey,\n    radiusScale,\n    angleStep,\n    symbol,\n    size = 6,\n    color = { from: 'color' },\n    borderWidth = 0,\n    borderColor = { from: 'color' },\n    enableLabel = false,\n    label = 'value',\n    formatValue,\n    labelYOffset,\n}: RadarDotsProps<D>) => {\n    const theme = useTheme()\n    const fillColor = getInheritedColorGenerator(color, theme)\n    const strokeColor = getInheritedColorGenerator(borderColor, theme)\n    const getLabel = usePropertyAccessor<PointData, string | number>(label)\n\n    const points: PointProps[] = useMemo(\n        () =>\n            data.reduce((acc, datum, i) => {\n                const index = getIndex(datum)\n                keys.forEach(key => {\n                    const value = datum[key] as number\n\n                    const pointData: PointData = {\n                        index,\n                        key,\n                        value,\n                        formattedValue: formatValue(value, key),\n                        color: colorByKey[key],\n                    }\n\n                    acc.push({\n                        key: `${key}.${index}`,\n                        label: enableLabel ? getLabel(pointData) : undefined,\n                        style: {\n                            fill: fillColor(pointData),\n                            stroke: strokeColor(pointData),\n                            ...positionFromAngle(\n                                angleStep * i - Math.PI / 2,\n                                radiusScale(datum[key] as number)\n                            ),\n                        },\n                        data: pointData,\n                    })\n                })\n\n                return acc\n            }, [] as PointProps[]),\n        [\n            data,\n            keys,\n            getIndex,\n            colorByKey,\n            enableLabel,\n            getLabel,\n            formatValue,\n            fillColor,\n            strokeColor,\n            angleStep,\n            radiusScale,\n        ]\n    )\n\n    return (\n        <>\n            {points.map(point => (\n                <DotsItem\n                    key={point.key}\n                    x={point.style.x}\n                    y={point.style.y}\n                    symbol={symbol}\n                    size={size}\n                    color={point.style.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.style.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    datum={point.data}\n                />\n            ))}\n        </>\n    )\n}\n","import { RadarGridLabel } from './RadarGridLabel'\nimport { RadarSliceTooltip } from './RadarSliceTooltip'\nimport { RadarLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['grid', 'layers', 'slices', 'dots', 'legends'] as RadarLayerId[],\n\n    maxValue: 'auto' as const,\n\n    curve: 'linearClosed' as const,\n\n    borderWidth: 2,\n    borderColor: { from: 'color' },\n\n    gridLevels: 5,\n    gridShape: 'circular' as const,\n    gridLabelOffset: 16,\n    gridLabel: RadarGridLabel,\n\n    enableDots: true,\n    dotSize: 6,\n    dotColor: { from: 'color' },\n    dotBorderWidth: 0,\n    dotBorderColor: { from: 'color' },\n    enableDotLabel: false,\n    dotLabel: 'formattedValue',\n    dotLabelYOffset: -12,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 0.25,\n    blendMode: 'normal' as const,\n\n    isInteractive: true,\n    sliceTooltip: RadarSliceTooltip,\n\n    legends: [],\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    defs: [],\n    fill: [],\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { GridLabelProps } from './types'\n\nexport const RadarGridLabel = ({ id, anchor, animated: animatedProps }: GridLabelProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <text style={theme.axis.ticks.text} dominantBaseline=\"central\" textAnchor={anchor}>\n                {id}\n            </text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RadarSliceTooltipProps } from './types'\n\nexport const RadarSliceTooltip = ({ index, data }: RadarSliceTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            data.map(datum => [\n                <Chip key={datum.id} color={datum.color} />,\n                datum.id,\n                datum.formattedValue,\n            ]),\n        [data]\n    )\n\n    return <TableTooltip title={<strong>{index}</strong>} rows={rows} />\n}\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useCurveInterpolation,\n    usePropertyAccessor,\n    useValueFormatter,\n} from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { svgDefaultProps } from './props'\nimport {\n    RadarColorMapping,\n    RadarCommonProps,\n    RadarDataProps,\n    RadarCustomLayerProps,\n    RadarSvgProps,\n    BoundLegendProps,\n} from './types'\n\nexport const useRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    maxValue,\n    valueFormat,\n    curve,\n    width,\n    height,\n    colors = svgDefaultProps.colors,\n    legends,\n    defs,\n    fill,\n}: {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    indexBy: RadarDataProps<D>['indexBy']\n    maxValue: RadarCommonProps<D>['maxValue']\n    valueFormat?: RadarCommonProps<D>['valueFormat']\n    curve: RadarCommonProps<D>['curve']\n    width: number\n    height: number\n    colors: RadarCommonProps<D>['colors']\n    legends: RadarCommonProps<D>['legends']\n    defs: RadarSvgProps<D>['defs']\n    fill: RadarSvgProps<D>['fill']\n}) => {\n    const getIndex = usePropertyAccessor<D, string>(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const formatValue = useValueFormatter<number, string>(valueFormat)\n\n    const getColor = useOrdinalColorScale<{ key: string; index: number }>(colors, 'key')\n    const colorByKey: RadarColorMapping = useMemo(\n        () =>\n            keys.reduce<RadarColorMapping>((mapping, key, index) => {\n                mapping[key] = getColor({ key, index })\n                return mapping\n            }, {}),\n        [keys, getColor]\n    )\n\n    const { boundDefs, fillByKey } = useMemo(() => {\n        // expand keys into structure expected by bindDefs\n        const keyData = keys.map(k => ({ key: k, color: colorByKey[k], data, fill: null }))\n        const boundDefs = bindDefs(defs, keyData, fill)\n        const fillByKey = keyData.reduce<Record<string, string | null>>((mapping, keyDatum) => {\n            const { key: keyName, fill } = keyDatum\n            mapping[keyName] = fill\n            return mapping\n        }, {})\n\n        return { boundDefs, fillByKey }\n    }, [keys, data, defs, fill, colorByKey])\n\n    const { radius, radiusScale, centerX, centerY, angleStep } = useMemo(() => {\n        const allValues: number[] = data.reduce(\n            (acc: number[], d) => [...acc, ...keys.map(key => d[key] as number)],\n            [] as number[]\n        )\n        const computedMaxValue = maxValue !== 'auto' ? maxValue : Math.max(...allValues)\n\n        const radius = Math.min(width, height) / 2\n        const radiusScale = scaleLinear<number, number>()\n            .range([0, radius])\n            .domain([0, computedMaxValue])\n\n        return {\n            radius,\n            radiusScale,\n            centerX: width / 2,\n            centerY: height / 2,\n            angleStep: (Math.PI * 2) / data.length,\n        }\n    }, [keys, data, maxValue, width, height])\n\n    const curveFactory = useCurveInterpolation(curve)\n\n    const customLayerProps: RadarCustomLayerProps<D> = useMemo(\n        () => ({\n            data,\n            keys,\n            indices,\n            colorByKey,\n            centerX,\n            centerY,\n            radiusScale,\n            angleStep,\n        }),\n        [data, keys, indices, colorByKey, centerX, centerY, radiusScale, angleStep]\n    )\n\n    const legendData = useMemo(\n        () => keys.map(key => ({ id: key, label: key, color: colorByKey[key] })),\n        [keys, colorByKey]\n    )\n\n    const boundLegends: BoundLegendProps[] = useMemo(\n        () =>\n            legends.map(({ data: customData, ...legend }) => {\n                const boundData = customData?.map(cd => {\n                    const findData = legendData.find(ld => ld.id === cd.id) || {}\n                    return { ...findData, ...cd }\n                })\n                return { ...legend, data: boundData || legendData }\n            }),\n        [legends, legendData]\n    )\n\n    return {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        legendData,\n        boundLegends,\n        customLayerProps,\n    }\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { RadarLayer } from './RadarLayer'\nimport { RadarGrid } from './RadarGrid'\nimport { RadarSlices } from './RadarSlices'\nimport { RadarDots } from './RadarDots'\nimport { svgDefaultProps } from './props'\nimport { RadarLayerId, RadarSvgProps } from './types'\nimport { useRadar } from './hooks'\n\ntype InnerRadarProps<D extends Record<string, unknown>> = Omit<\n    RadarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    layers = svgDefaultProps.layers,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    curve = svgDefaultProps.curve,\n    margin: partialMargin,\n    width,\n    height,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    gridLevels = svgDefaultProps.gridLevels,\n    gridShape = svgDefaultProps.gridShape,\n    gridLabel = svgDefaultProps.gridLabel,\n    gridLabelOffset = svgDefaultProps.gridLabelOffset,\n    enableDots = svgDefaultProps.enableDots,\n    dotSymbol,\n    dotSize = svgDefaultProps.dotSize,\n    dotColor = svgDefaultProps.dotColor,\n    dotBorderWidth = svgDefaultProps.dotBorderWidth,\n    dotBorderColor = svgDefaultProps.dotBorderColor,\n    enableDotLabel = svgDefaultProps.enableDotLabel,\n    dotLabel = svgDefaultProps.dotLabel,\n    dotLabelYOffset = svgDefaultProps.dotLabelYOffset,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    blendMode = svgDefaultProps.blendMode,\n    isInteractive = svgDefaultProps.isInteractive,\n    sliceTooltip = svgDefaultProps.sliceTooltip,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n}: InnerRadarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        boundLegends,\n        customLayerProps,\n    } = useRadar<D>({\n        data,\n        keys,\n        indexBy,\n        maxValue,\n        valueFormat,\n        curve,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        legends,\n        defs,\n        fill,\n    })\n\n    const layerById: Record<RadarLayerId, ReactNode> = {\n        grid: null,\n        layers: null,\n        slices: null,\n        dots: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <g key=\"grid\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarGrid<D>\n                    levels={gridLevels}\n                    shape={gridShape}\n                    radius={radius}\n                    angleStep={angleStep}\n                    indices={indices}\n                    label={gridLabel}\n                    labelOffset={gridLabelOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('layers')) {\n        layerById.layers = (\n            <g key=\"layers\" transform={`translate(${centerX}, ${centerY})`}>\n                {keys.map(key => (\n                    <RadarLayer<D>\n                        key={key}\n                        data={data}\n                        item={key}\n                        colorByKey={colorByKey}\n                        fillByKey={fillByKey}\n                        radiusScale={radiusScale}\n                        angleStep={angleStep}\n                        curveFactory={curveFactory}\n                        borderWidth={borderWidth}\n                        borderColor={borderColor}\n                        fillOpacity={fillOpacity}\n                        blendMode={blendMode}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    if (layers.includes('slices') && isInteractive) {\n        layerById.slices = (\n            <g key=\"slices\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarSlices<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    formatValue={formatValue}\n                    colorByKey={colorByKey}\n                    radius={radius}\n                    angleStep={angleStep}\n                    tooltip={sliceTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <g key=\"dots\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarDots<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    radiusScale={radiusScale}\n                    angleStep={angleStep}\n                    symbol={dotSymbol}\n                    size={dotSize}\n                    colorByKey={colorByKey}\n                    color={dotColor}\n                    borderWidth={dotBorderWidth}\n                    borderColor={dotBorderColor}\n                    enableLabel={enableDotLabel}\n                    label={dotLabel}\n                    formatValue={formatValue}\n                    labelYOffset={dotLabelYOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {boundLegends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Radar = <D extends Record<string, unknown>>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadarSvgProps } from './types'\nimport { Radar } from './Radar'\n\nexport const ResponsiveRadar = <D extends Record<string, unknown>>(\n    props: Omit<RadarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Radar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["RadarLayer","data","key","item","colorByKey","fillByKey","radiusScale","angleStep","curveFactory","borderWidth","borderColor","fillOpacity","blendMode","theme","useTheme","getBorderColor","useInheritedColor","lineGenerator","useMemo","lineRadial","radius","d","angle","_","i","curve","useMotionConfig","animate","springConfig","config","animatedPath","useAnimatedPath","map","animatedProps","useSpring","fill","stroke","color","immediate","_jsx","animated","path","strokeWidth","style","mixBlendMode","RadarGridLabels","angles","indices","labelComponent","label","labelOffset","labels","index","_angle","position","positionFromAngle","textAnchor","radiansToDegrees","id","anchor","springs","useSprings","length","transform","x","y","createElement","RadarGridLevelCircular","memo","circle","r","to","value","Math","max","grid","line","RadarGridLevelLinear","dataLength","radarLineGenerator","curveLinearClosed","points","Array","from","RadarGridLevels","shape","props","RadarGrid","levels","radii","reverse","PI","_jsxs","x1","y1","x2","y2","RadarSlice","datum","keys","formatValue","startAngle","endAngle","arcGenerator","tooltip","useState","isHover","setIsHover","useTooltip","showTooltipFromEvent","hideTooltip","tooltipData","formattedValue","sort","a","b","showItemTooltip","useCallback","event","hideItemTooltip","tipX","tipY","crosshair","onMouseEnter","onMouseMove","onMouseLeave","RadarSlices","getIndex","arc","d3Arc","outerRadius","innerRadius","rootStartAngle","RadarDots","symbol","size","enableLabel","labelYOffset","fillColor","getInheritedColorGenerator","strokeColor","getLabel","usePropertyAccessor","reduce","acc","forEach","pointData","push","undefined","point","DotsItem","svgDefaultProps","layers","maxValue","gridLevels","gridShape","gridLabelOffset","gridLabel","g","axis","ticks","text","dominantBaseline","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabel","dotLabelYOffset","colors","scheme","isInteractive","sliceTooltip","rows","Chip","TableTooltip","title","legends","role","motionConfig","defs","useRadar","indexBy","valueFormat","width","height","useValueFormatter","getColor","useOrdinalColorScale","mapping","keyData","k","boundDefs","bindDefs","keyDatum","keyName","allValues","computedMaxValue","min","scaleLinear","range","domain","centerX","centerY","useCurveInterpolation","customLayerProps","legendData","boundLegends","customData","legend","boundData","cd","find","ld","InnerRadar","partialMargin","margin","dotSymbol","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","layerById","slices","dots","includes","Fragment","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Radar","renderWrapper","otherProps","Container","ResponsiveWrapper"],"mappings":"moBAsBO,IAAMA,EAAa,kBACtBC,IAAAA,KACMC,IAANC,KACAC,IAAAA,WACAC,IAAAA,UACAC,IAAAA,YACAC,IAAAA,UACAC,IAAAA,aACAC,IAAAA,YACAC,IAAAA,YACAC,IAAAA,YACAC,IAAAA,UAEMC,EAAQC,aACRC,EAAiBC,oBAAkBN,EAAaG,GAEhDI,EAAgBC,WAAQ,kBACnBC,eACFC,QAAO,SAAAC,UAAKf,EAAYe,MACxBC,OAAM,SAACC,EAAGC,UAAMA,EAAIjB,KACpBkB,MAAMjB,KACZ,CAACF,EAAaC,EAAWC,MAEckB,oBAAlCC,IAAAA,QAAiBC,IAARC,OACXC,EAAeC,kBAAgBd,EAAchB,EAAK+B,KAAI,SAAAX,UAAKA,EAAEnB,QAC7D+B,EAAgBC,YAA4C,CAC9DC,KAAM/B,EAAWF,GACjBkC,OAAQrB,EAAe,CAAEb,IAAAA,EAAKmC,MAAOjC,EAAWF,KAChD2B,OAAQD,EACRU,WAAYX,IAEVQ,WAAO9B,EAAUH,MAAQ+B,EAAcE,YAGzCI,MAACC,WAASC,MAENpB,EAAGS,EACHK,KAAMA,EACNxB,YAAaA,EACbyB,OAAQH,EAAcG,OACtBM,YAAajC,EACbkC,MAAO,CAAEC,aAAchC,IANlBV,ICpCJ2C,EAAkB,gBAC3BzB,IAAAA,OACA0B,IAAAA,OACAC,IAAAA,QACOC,IAAPC,MACAC,IAAAA,cAE0CxB,oBAAlCC,IAAAA,QAAiBC,IAARC,OAEXsB,EAASJ,EAAQf,KAAI,SAACoB,EAAO5B,OAzBV6B,EACnB/B,EAyBIgC,EAAWC,oBAAkBT,EAAOtB,GAAIJ,EAAS8B,GACjDM,GA3BeH,EA2BkBP,EAAOtB,IA1B5CF,EAAQmC,mBAAiBJ,GAAU,KAE5B,IAAM/B,GAAS,KAAQA,GAAS,KAAOA,GAAS,IAAa,SACtEA,EAAQ,IAAY,MACjB,mBAyBCoC,GAAIN,EACJ9B,MAAOmC,mBAAiBX,EAAOtB,IAC/BmC,OAAQH,GACLF,MAILM,EAAUC,aACZV,EAAOW,OACPX,EAAOnB,KAAI,SAAAiB,SAAU,CACjBc,uBAAwBd,EAAMe,OAAMf,EAAMgB,MAC1CpC,OAAQD,EACRU,WAAYX,cAKhBY,2BACKqB,EAAQ5B,KAAI,SAACC,EAAemB,OACnBH,EAAQE,EAAOC,UAEdc,gBAAclB,EAAgB,CACjC9C,IAAK+C,EAAMS,GACXA,GAAIT,EAAMS,GACVC,OAAQV,EAAMU,OACdrC,MAAO2B,EAAM3B,MACb0C,EAAGf,EAAMe,EACTC,EAAGhB,EAAMgB,EACTzB,SAAUP,sBCrDxBkC,EAAyBC,QAAK,gBAAGhD,IAAAA,OAC7BP,EAAQC,eAC4BY,oBAAlCC,IAAAA,QAAiBC,IAARC,OAEXI,EAAgBC,YAAU,CAC5Bd,OAAAA,EACAS,OAAQD,EACRU,WAAYX,WAIZY,MAACC,WAAS6B,UACNlC,KAAK,OACLmC,EAAGC,KAAGtC,EAAcb,QAAQ,SAAAoD,UAASC,KAAKC,IAAIF,EAAO,OAChD3D,EAAM8D,KAAKC,UAWtBC,EAAuB,gBAAGzD,IAAAA,OAAQb,IAAAA,UAAWuE,IAAAA,WACzCjE,EAAQC,aAERiE,EAAqB7D,WACvB,kBACIC,eACKG,OAAM,SAAAE,UAAKA,EAAIjB,KACfa,OAAOA,GACPK,MAAMuD,uBACf,CAACzE,EAAWa,IAGV6D,EAASC,MAAMC,KAAK,CAAErB,OAAQgB,IAAc,SAACvD,EAAGC,UAAMA,KACtDM,EAAeC,kBAAgBgD,EAAmBE,WAGpD1C,MAACC,WAASC,QACNN,KAAK,OACLd,EAAGS,GACEjB,EAAM8D,KAAKC,QAYfQ,EAAkB,gBAC3BC,IAAAA,MACGC,eAEc,aAAVD,EACH9C,MAAC4B,GAAuB/C,OAAQkE,EAAMlE,SAEtCmB,MAACsC,OAAyBS,KCzDrBC,EAAY,gBACrBxC,IAAAA,QACAyC,IAAAA,OACAH,IAAAA,MACAjE,IAAAA,OACAb,IAAAA,UACA0C,IAAAA,MACAC,IAAAA,YAEMrC,EAAQC,eACYI,WAAQ,iBACvB,CACHuE,MAAOP,MAAMC,KAAK,CAAErB,OAAQ0B,IACvBxD,KAAI,SAACT,EAAGC,UAAOJ,EAASoE,GAAWhE,EAAI,MACvCkE,UACL5C,OAAQoC,MAAMC,KAAK,CAAErB,OAAQf,EAAQe,SAAU,SAACvC,EAAGC,UAAMA,EAAIjB,EAAYkE,KAAKkB,GAAK,QAExF,CAAC5C,EAASyC,EAAQpE,EAAQb,IAPrBkF,IAAAA,MAAO3C,IAAAA,cAUX8C,6BACK9C,EAAOd,KAAI,SAACV,EAAOE,OACV8B,EAAWC,oBAAkBjC,EAAOF,UAEtCmB,gBAEIsD,GAAI,EACJC,GAAI,EACJC,GAAIzC,EAASU,EACbgC,GAAI1C,EAASW,GACRpD,EAAM8D,KAAKC,cALHpD,MASxBiE,EAAMzD,KAAI,SAACZ,EAAQI,UAChBe,MAAC6C,GAEGC,MAAOA,EACPjE,OAAQA,EACRb,UAAWA,EACXuE,WAAY/B,EAAQe,iBAJNtC,MAOtBe,MAACM,GACGzB,OAAQA,EACR0B,OAAQA,EACRC,QAASA,EACTG,YAAaA,EACbD,MAAOA,QC7CVgD,EAAa,gBACtBC,IAAAA,MACAC,IAAAA,KACA/C,IAAAA,MACAgD,IAAAA,YACAhG,IAAAA,WACAgB,IAAAA,OACAiF,IAAAA,WACAC,IAAAA,SACAC,IAAAA,aACAC,IAAAA,UAE8BC,YAAS,GAAhCC,OAASC,OACV9F,EAAQC,eACgC8F,eAAtCC,IAAAA,qBAAsBC,IAAAA,YAExBC,EAAc7F,WAAQ,eAClBjB,EAAiCkG,EAAKnE,KAAI,SAAA9B,SAAQ,CACpDmC,MAAOjC,EAAWF,GAClBwD,GAAIxD,EACJsE,MAAO0B,EAAMhG,GACb8G,eAAgBZ,EAAYF,EAAMhG,GAAgBA,cAEtDD,EAAKgH,MAAK,SAACC,EAAGC,UAAMD,EAAE1C,MAAQ2C,EAAE3C,SAChCvE,EAAKyF,UAEEzF,IACR,CAACiG,EAAOC,EAAMC,EAAahG,IAExBgH,EAAkBC,eACpB,SAAAC,GACIX,GAAW,GACXE,EACI3C,gBAAcsC,EAAS,CACnBpD,MAAAA,EACAnD,KAAM8G,IAEVO,KAGR,CAACT,EAAsBL,EAASpD,EAAO2D,IAGrCQ,EAAkBF,eAAY,WAChCV,GAAW,GACXG,MACD,CAACA,EAAaH,MAEYzF,WAAQ,eAC3BoC,EAAWC,oBACb8C,EAAuC,IAAzBC,EAAWD,GAAoB5B,KAAKkB,GAAK,EACvDvE,SAGG,CACHqB,KAAM8D,EAAa,CAAEF,WAAAA,EAAYC,SAAAA,IACjCkB,KAAMlE,EAASU,EACfyD,KAAMnE,EAASW,KAEpB,CAACoC,EAAYC,EAAUlF,EAAQmF,IAX1B9D,IAAAA,KAAM+E,IAAAA,KAAMC,IAAAA,YAchB7B,6BACKc,GAAWnE,cAAMsD,GAAI,EAAGC,GAAI,EAAGC,GAAIyB,EAAMxB,GAAIyB,EAAM9E,MAAO9B,EAAM6G,UAAU9C,OAC3ErC,cACIlB,EAAGoB,EACHN,KAAK,OACLxB,YAAa,EACbgH,aAAcP,EACdQ,YAAaR,EACbS,aAAcN,QC1EjBO,EAAc,gBACvB7H,IAAAA,KACAkG,IAAAA,KACA4B,IAAAA,SACA3B,IAAAA,YACAhG,IAAAA,WACAgB,IAAAA,OACAb,IAAAA,UACAiG,IAAAA,QAEMwB,EAAMC,QAAkDC,YAAY9G,GAAQ+G,YAAY,GAG1FC,IAD8B,GAAZ7H,UAIlBgC,2BACKtC,EAAK+B,KAAI,SAAAX,OACA+B,EAAQ2E,EAAS1G,GACjBgF,EAAa+B,EACb9B,EAAWD,EAAa9F,SAE9B6H,GAAkB7H,EAGdgC,MAAC0D,GAEGC,MAAO7E,EACP8E,KAAMA,EACN/C,MAAOA,EACPgD,YAAaA,EACbhG,WAAYA,EACZiG,WAAYA,EACZC,SAAUA,EACVlF,OAAQA,EACRmF,aAAcyB,EACdxB,QAASA,GAVJpD,SCjBhBiF,EAAY,gBACrBpI,IAAAA,KACAkG,IAAAA,KACA4B,IAAAA,SACA3H,IAAAA,WACAE,IAAAA,YACAC,IAAAA,UACA+H,IAAAA,WACAC,KAAAA,aAAO,QACPlG,MAAAA,aAAQ,CAAE8C,KAAM,eAChB1E,YAAAA,aAAc,QACdC,YAAAA,aAAc,CAAEyE,KAAM,eACtBqD,YAAAA,oBACAvF,MAAAA,aAAQ,UACRmD,IAAAA,YACAqC,IAAAA,aAEM5H,EAAQC,aACR4H,EAAYC,6BAA2BtG,EAAOxB,GAC9C+H,EAAcD,6BAA2BjI,EAAaG,GACtDgI,EAAWC,sBAAgD7F,GAE3DgC,EAAuB/D,WACzB,kBACIjB,EAAK8I,QAAO,SAACC,EAAK9C,EAAO1E,OACf4B,EAAQ2E,EAAS7B,UACvBC,EAAK8C,SAAQ,SAAA/I,OACHsE,EAAQ0B,EAAMhG,GAEdgJ,EAAuB,CACzB9F,MAAAA,EACAlD,IAAAA,EACAsE,MAAAA,EACAwC,eAAgBZ,EAAY5B,EAAOtE,GACnCmC,MAAOjC,EAAWF,IAGtB8I,EAAIG,KAAK,CACLjJ,IAAQA,MAAOkD,EACfH,MAAOuF,EAAcK,EAASK,QAAaE,EAC3CzG,SACIR,KAAMuG,EAAUQ,GAChB9G,OAAQwG,EAAYM,IACjB3F,oBACChD,EAAYiB,EAAIiD,KAAKkB,GAAK,EAC1BrF,EAAY4F,EAAMhG,MAG1BD,KAAMiJ,OAIPF,IACR,MACP,CACI/I,EACAkG,EACA4B,EACA3H,EACAoI,EACAK,EACAzC,EACAsC,EACAE,EACArI,EACAD,WAKJiC,2BACK0C,EAAOjD,KAAI,SAAAqH,UACR9G,MAAC+G,YAEGtF,EAAGqF,EAAM1G,MAAMqB,EACfC,EAAGoF,EAAM1G,MAAMsB,EACfqE,OAAQA,EACRC,KAAMA,EACNlG,MAAOgH,EAAM1G,MAAMR,KACnB1B,YAAaA,EACbC,YAAa2I,EAAM1G,MAAMP,OACzBa,MAAOoG,EAAMpG,MACbwF,aAAcA,EACdvC,MAAOmD,EAAMpJ,MAVRoJ,EAAMnJ,WC7FlBqJ,EAAkB,CAC3BC,OAAQ,CAAC,OAAQ,SAAU,SAAU,OAAQ,WAE7CC,SAAU,OAEVhI,MAAO,eAEPhB,YAAa,EACbC,YAAa,CAAEyE,KAAM,SAErBuE,WAAY,EACZC,UAAW,WACXC,gBAAiB,GACjBC,UCb0B,gBAAGnG,IAAAA,GAAIC,IAAAA,OAAkB1B,IAAVO,SACnC3B,EAAQC,oBAGVyB,MAACC,WAASsH,GAAE/F,UAAW9B,EAAc8B,mBACjCxB,cAAMI,MAAO9B,EAAMkJ,KAAKC,MAAMC,KAAMC,iBAAiB,UAAU1G,WAAYG,WACtED,ODSbyG,YAAY,EACZC,QAAS,EACTC,SAAU,CAAElF,KAAM,SAClBmF,eAAgB,EAChBC,eAAgB,CAAEpF,KAAM,SACxBqF,gBAAgB,EAChBC,SAAU,iBACVC,iBAAkB,GAElBC,OAAQ,CAAEC,OAAQ,QAClBjK,YAAa,IACbC,UAAW,SAEXiK,eAAe,EACfC,aE7B6B,gBAAG1H,IAAAA,MAAOnD,IAAAA,KACjC8K,EAAO7J,WACT,kBACIjB,EAAK+B,KAAI,SAAAkE,SAAS,CACd3D,MAACyI,QAAoB3I,MAAO6D,EAAM7D,OAAvB6D,EAAMxC,IACjBwC,EAAMxC,GACNwC,EAAMc,qBAEd,CAAC/G,WAGEsC,MAAC0I,gBAAaC,MAAO3I,yBAASa,IAAiB2H,KAAMA,KFoB5DI,QAAS,GACTC,KAAM,MAENzJ,SAAS,EACT0J,aAAc,SAEdC,KAAM,GACNnJ,KAAM,eGtBGoJ,EAAW,gBACpBtL,IAAAA,KACAkG,IAAAA,KACAqF,IAAAA,QACA/B,IAAAA,SACAgC,IAAAA,YACAhK,IAAAA,MACAiK,IAAAA,MACAC,IAAAA,WACAhB,OAAAA,aAASpB,EAAgBoB,SACzBQ,IAAAA,QACAG,IAAAA,KACAnJ,IAAAA,KAeM4F,EAAWe,sBAA+B0C,GAC1CzI,EAAU7B,WAAQ,kBAAMjB,EAAK+B,IAAI+F,KAAW,CAAC9H,EAAM8H,IACnD3B,EAAcwF,oBAAkCH,GAEhDI,EAAWC,uBAAqDnB,EAAQ,OACxEvK,EAAgCc,WAClC,kBACIiF,EAAK4C,QAA0B,SAACgD,EAAS7L,EAAKkD,UAC1C2I,EAAQ7L,GAAO2L,EAAS,CAAE3L,IAAAA,EAAKkD,MAAAA,IACxB2I,IACR,MACP,CAAC5F,EAAM0F,MAGsB3K,WAAQ,eAE/B8K,EAAU7F,EAAKnE,KAAI,SAAAiK,SAAM,CAAE/L,IAAK+L,EAAG5J,MAAOjC,EAAW6L,GAAIhM,KAAAA,EAAMkC,KAAM,SACrE+J,EAAYC,WAASb,EAAMU,EAAS7J,GACpC9B,EAAY2L,EAAQjD,QAAsC,SAACgD,EAASK,OACzDC,EAAkBD,EAAvBlM,IAAciC,EAASiK,EAATjK,YACtB4J,EAAQM,GAAWlK,EACZ4J,IACR,UAEI,CAAEG,UAAAA,EAAW7L,UAAAA,KACrB,CAAC8F,EAAMlG,EAAMqL,EAAMnJ,EAAM/B,IAXpB8L,IAAAA,UAAW7L,IAAAA,YAa0Ca,WAAQ,eAC3DoL,EAAsBrM,EAAK8I,QAC7B,SAACC,EAAe3H,mBAAU2H,EAAQ7C,EAAKnE,KAAI,SAAA9B,UAAOmB,EAAEnB,SACpD,IAEEqM,EAAgC,SAAb9C,EAAsBA,EAAWhF,KAAKC,UAALD,KAAY6H,GAEhElL,EAASqD,KAAK+H,IAAId,EAAOC,GAAU,QAKlC,CACHvK,OAAAA,EACAd,YANgBmM,gBACfC,MAAM,CAAC,EAAGtL,IACVuL,OAAO,CAAC,EAAGJ,IAKZK,QAASlB,EAAQ,EACjBmB,QAASlB,EAAS,EAClBpL,UAAsB,EAAVkE,KAAKkB,GAAU1F,EAAK6D,UAErC,CAACqC,EAAMlG,EAAMwJ,EAAUiC,EAAOC,IAnBzBvK,IAAAA,OAAQd,IAAAA,YAAasM,IAAAA,QAASC,IAAAA,QAAStM,IAAAA,UAqBzCC,EAAesM,wBAAsBrL,GAErCsL,EAA6C7L,WAC/C,iBAAO,CACHjB,KAAAA,EACAkG,KAAAA,EACApD,QAAAA,EACA3C,WAAAA,EACAwM,QAAAA,EACAC,QAAAA,EACAvM,YAAAA,EACAC,UAAAA,KAEJ,CAACN,EAAMkG,EAAMpD,EAAS3C,EAAYwM,EAASC,EAASvM,EAAaC,IAG/DyM,EAAa9L,WACf,kBAAMiF,EAAKnE,KAAI,SAAA9B,SAAQ,CAAEwD,GAAIxD,EAAK+C,MAAO/C,EAAKmC,MAAOjC,EAAWF,SAChE,CAACiG,EAAM/F,IAGL6M,EAAmC/L,WACrC,kBACIiK,EAAQnJ,KAAI,gBAASkL,IAANjN,KAAqBkN,SAC1BC,QAAYF,SAAAA,EAAYlL,KAAI,SAAAqL,eACbL,EAAWM,MAAK,SAAAC,UAAMA,EAAG7J,KAAO2J,EAAG3J,OAAO,GAClC2J,kBAEjBF,GAAQlN,KAAMmN,GAAaJ,SAE/C,CAAC7B,EAAS6B,UAGP,CACHjF,SAAAA,EACAhF,QAAAA,EACAqD,YAAAA,EACAhG,WAAAA,EACAC,UAAAA,EACA6L,UAAAA,EACA9K,OAAAA,EACAd,YAAAA,EACAsM,QAAAA,EACAC,QAAAA,EACAtM,UAAAA,EACAC,aAAAA,EACAwM,WAAAA,EACAC,aAAAA,EACAF,iBAAAA,yEC/HFS,EAAa,gBACfvN,IAAAA,KACAkG,IAAAA,KACAqF,IAAAA,YACAhC,OAAAA,aAASD,EAAgBC,aACzBC,SAAAA,aAAWF,EAAgBE,WAC3BgC,IAAAA,gBACAhK,MAAAA,aAAQ8H,EAAgB9H,QAChBgM,IAARC,OACAhC,IAAAA,MACAC,IAAAA,WACAlL,YAAAA,aAAc8I,EAAgB9I,kBAC9BC,YAAAA,aAAc6I,EAAgB7I,kBAC9BgJ,WAAAA,aAAaH,EAAgBG,iBAC7BC,UAAAA,aAAYJ,EAAgBI,gBAC5BE,UAAAA,aAAYN,EAAgBM,gBAC5BD,gBAAAA,aAAkBL,EAAgBK,sBAClCO,WAAAA,aAAaZ,EAAgBY,aAC7BwD,IAAAA,cACAvD,QAAAA,aAAUb,EAAgBa,cAC1BC,SAAAA,aAAWd,EAAgBc,eAC3BC,eAAAA,aAAiBf,EAAgBe,qBACjCC,eAAAA,aAAiBhB,EAAgBgB,qBACjCC,eAAAA,aAAiBjB,EAAgBiB,qBACjCC,SAAAA,aAAWlB,EAAgBkB,eAC3BC,gBAAAA,aAAkBnB,EAAgBmB,uBAClCC,OAAAA,eAASpB,EAAgBoB,eACzBhK,YAAAA,eAAc4I,EAAgB5I,oBAC9BC,UAAAA,eAAY2I,EAAgB3I,kBAC5BiK,cAAAA,eAAgBtB,EAAgBsB,sBAChCC,aAAAA,eAAevB,EAAgBuB,qBAC/BK,QAAAA,eAAU5B,EAAgB4B,WAC1BC,KAAAA,KACAwC,KAAAA,UACAC,KAAAA,eACAC,KAAAA,qBACAxC,KAAAA,eAAO/B,EAAgB+B,aACvBnJ,KAAAA,eAAOoH,EAAgBpH,WAE8C4L,gBACjErC,EACAC,EACA8B,GAHIC,MAAAA,OAAQM,MAAAA,WAAYC,MAAAA,YAAaC,MAAAA,WAAYC,MAAAA,eAqBjD5C,EAAY,CACZtL,KAAAA,EACAkG,KAAAA,EACAqF,QAAAA,EACA/B,SAAAA,EACAgC,YAAAA,EACAhK,MAAAA,EACAiK,MAAOsC,GACPrC,OAAQsC,GACRtD,OAAAA,GACAQ,QAAAA,GACAG,KAAAA,GACAnJ,KAAAA,KA1BA4F,MAAAA,SACAhF,MAAAA,QACAqD,MAAAA,YACAhG,MAAAA,WACAC,MAAAA,UACA6L,MAAAA,UACA9K,MAAAA,OACAd,MAAAA,YACAsM,MAAAA,QACAC,MAAAA,QACAtM,MAAAA,UACAC,MAAAA,aACAyM,MAAAA,aACAF,MAAAA,iBAgBEqB,GAA6C,CAC/CzJ,KAAM,KACN6E,OAAQ,KACR6E,OAAQ,KACRC,KAAM,KACNnD,QAAS,aAGT3B,EAAO+E,SAAS,UAChBH,GAAUzJ,KACNpC,WAAcwB,uBAAwB6I,QAAYC,gBAC9CtK,MAACgD,GACGC,OAAQkE,EACRrE,MAAOsE,EACPvI,OAAQA,GACRb,UAAWA,GACXwC,QAASA,GACTE,MAAO4G,EACP3G,YAAa0G,KARd,SAcXJ,EAAO+E,SAAS,YAChBH,GAAU5E,OACNjH,WAAgBwB,uBAAwB6I,QAAYC,gBAC/C1G,EAAKnE,KAAI,SAAA9B,UACNqC,MAACvC,GAEGC,KAAMA,EACNE,KAAMD,EACNE,WAAYA,GACZC,UAAWA,GACXC,YAAaA,GACbC,UAAWA,GACXC,aAAcA,GACdC,YAAaA,EACbC,YAAaA,EACbC,YAAaA,GACbC,UAAWA,IAXNV,OAHV,WAqBXsJ,EAAO+E,SAAS,WAAa1D,KAC7BuD,GAAUC,OACN9L,WAAgBwB,uBAAwB6I,QAAYC,gBAChDtK,MAACuF,GACG7H,KAAMA,EACNkG,KAAMA,EACN4B,SAAUA,GACV3B,YAAaA,GACbhG,WAAYA,GACZgB,OAAQA,GACRb,UAAWA,GACXiG,QAASsE,MATV,WAeXtB,EAAO+E,SAAS,SAAWpE,IAC3BiE,GAAUE,KACN/L,WAAcwB,uBAAwB6I,QAAYC,gBAC9CtK,MAAC8F,GACGpI,KAAMA,EACNkG,KAAMA,EACN4B,SAAUA,GACVzH,YAAaA,GACbC,UAAWA,GACX+H,OAAQqF,EACRpF,KAAM6B,EACNhK,WAAYA,GACZiC,MAAOgI,EACP5J,YAAa6J,EACb5J,YAAa6J,EACb/B,YAAagC,EACbvH,MAAOwH,EACPrE,YAAaA,GACbqC,aAAciC,KAhBf,SAsBXlB,EAAO+E,SAAS,aAChBH,GAAUjD,QACN5I,MAACiM,qBACIvB,GAAajL,KAAI,SAACmL,EAAQ3L,UACvBe,MAACkM,oBAEOtB,GACJuB,eAAgBhD,EAChBiD,gBAAiBhD,IAHZnK,OAHH,YAclBe,MAACqM,cACGtD,KAAMY,GACNR,MAAOwC,GACPvC,OAAQwC,GACRT,OAAQA,GACRtC,KAAMA,GACNwC,UAAWA,GACXC,eAAgBA,GAChBC,gBAAiBA,YAEhBtE,EAAOxH,KAAI,SAAC6M,EAAOrN,eACK,mBAAVqN,EACAtM,MAACiM,qBAAkBtK,gBAAc2K,EAAO9B,KAAzBvL,kBAGnB4M,UAAAA,GAAYS,MAAU,WAMhCC,EAAQ,oBACjBjE,cAAAA,aAAgBtB,EAAgBsB,oBAChClJ,QAAAA,aAAU4H,EAAgB5H,cAC1B0J,aAAAA,aAAe9B,EAAgB8B,eAC/BxK,IAAAA,MACAkO,IAAAA,cACGC,gBAEHzM,MAAC0M,aAEOtN,QAAAA,EACAkJ,cAAAA,EACAQ,aAAAA,EACA0D,cAAAA,EACAlO,MAAAA,WAGJ0B,MAACiL,KAAc3C,cAAeA,GAAmBmE,mECrO1B,SAC3B1J,UAEA/C,MAAC2M,8BACI,gBAAGxD,IAAAA,MAAOC,IAAAA,cAAapJ,MAACuM,KAASpD,MAAOA,EAAOC,OAAQA,GAAYrG"}