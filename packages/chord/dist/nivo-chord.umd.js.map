{"version":3,"file":"nivo-chord.umd.js","sources":["../src/ChordArcTooltip.tsx","../src/ChordRibbonTooltip.tsx","../src/defaults.ts","../src/compute.ts","../src/hooks.ts","../src/ChordRibbon.tsx","../src/ChordRibbons.tsx","../src/ChordArc.tsx","../src/ChordArcs.tsx","../src/ChordLabels.tsx","../src/Chord.tsx","../src/ChordCanvas.tsx","../src/ResponsiveChord.tsx","../src/ResponsiveChordCanvas.tsx"],"sourcesContent":["import { memo } from 'react'\nimport { BasicTooltip } from '@nivo/tooltip'\nimport { ArcTooltipComponentProps } from './types'\n\nexport const ChordArcTooltip = memo(({ arc }: ArcTooltipComponentProps) => (\n    <BasicTooltip id={arc.label} value={arc.formattedValue} color={arc.color} enableChip={true} />\n))\n","import { memo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RibbonTooltipComponentProps } from './types'\n\nexport const ChordRibbonTooltip = memo(({ ribbon }: RibbonTooltipComponentProps) => (\n    <TableTooltip\n        rows={[\n            [\n                <Chip key=\"chip\" color={ribbon.source.color} />,\n                <strong key=\"id\">{ribbon.source.label}</strong>,\n                ribbon.source.formattedValue,\n            ],\n            [\n                <Chip key=\"chip\" color={ribbon.target.color} />,\n                <strong key=\"id\">{ribbon.target.label}</strong>,\n                ribbon.target.formattedValue,\n            ],\n        ]}\n    />\n))\n","import { LayerId, ChordSvgProps, ChordCommonProps } from './types'\nimport { ChordArcTooltip } from './ChordArcTooltip'\nimport { ChordRibbonTooltip } from './ChordRibbonTooltip'\n\nexport const commonDefaultProps: Omit<\n    ChordCommonProps,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'onArcMouseEnter'\n    | 'onArcMouseMove'\n    | 'onArcMouseLeave'\n    | 'onArcClick'\n    | 'onRibbonMouseEnter'\n    | 'onRibbonMouseMove'\n    | 'onRibbonMouseLeave'\n    | 'onRibbonClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['ribbons', 'arcs', 'labels', 'legends'],\n\n    padAngle: 0,\n    innerRadiusRatio: 0.9,\n    innerRadiusOffset: 0,\n\n    colors: { scheme: 'nivo' },\n\n    arcOpacity: 1,\n    activeArcOpacity: 1,\n    inactiveArcOpacity: 0.15,\n    arcBorderWidth: 1,\n    arcBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    arcTooltip: ChordArcTooltip,\n\n    ribbonOpacity: 0.5,\n    activeRibbonOpacity: 0.85,\n    inactiveRibbonOpacity: 0.15,\n    ribbonBorderWidth: 1,\n    ribbonBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.4]],\n    },\n    ribbonBlendMode: 'normal',\n\n    enableLabel: true,\n    label: 'id',\n    labelOffset: 12,\n    labelRotation: 0,\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    legends: [],\n\n    animate: true,\n    motionConfig: 'gentle',\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    ribbonBlendMode: 'normal' as NonNullable<ChordSvgProps['ribbonBlendMode']>,\n    ribbonTooltip: ChordRibbonTooltip,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { to, SpringValues } from '@react-spring/web'\nimport { arc as d3Arc } from 'd3-shape'\nimport { chord as d3Chord, ChordLayout, ribbon as d3Ribbon } from 'd3-chord'\nimport {\n    ArcDatum,\n    ChordCommonProps,\n    ChordDataProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n    ArcGenerator,\n    ArcAnimatedProps,\n} from './types'\nimport { OrdinalColorScale } from '@nivo/colors'\n\nexport const computeChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    d3Chord().padAngle(padAngle)\n\nexport const computeChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) => {\n    const center: [number, number] = [width / 2, height / 2]\n    const radius = Math.min(width, height) / 2\n    const innerRadius = radius * innerRadiusRatio\n    const ribbonRadius = radius * (innerRadiusRatio - innerRadiusOffset)\n\n    return {\n        center,\n        radius,\n        innerRadius,\n        arcGenerator: d3Arc()\n            .outerRadius(radius)\n            .innerRadius(innerRadius) as unknown as ArcGenerator,\n        ribbonGenerator: d3Ribbon().radius(ribbonRadius) as unknown as RibbonGenerator,\n    }\n}\n\nexport const computeChordArcsAndRibbons = ({\n    chord,\n    data,\n    keys,\n    getLabel,\n    formatValue,\n    getColor,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}): {\n    arcs: ArcDatum[]\n    ribbons: RibbonDatum[]\n} => {\n    const _ribbons = chord(data)\n\n    const arcs: ArcDatum[] = _ribbons.groups.map(chordGroup => {\n        const arc: Omit<ArcDatum, 'label' | 'color'> = {\n            ...chordGroup,\n            id: keys[chordGroup.index],\n            formattedValue: formatValue(chordGroup.value),\n        }\n\n        return {\n            ...arc,\n            label: getLabel(arc),\n            color: getColor(arc),\n        }\n    })\n\n    const ribbons: RibbonDatum[] = _ribbons.map(_ribbon => {\n        const source = {\n            ..._ribbon.source,\n            id: keys[_ribbon.source.index],\n            formattedValue: formatValue(_ribbon.source.value),\n        }\n\n        const target = {\n            ..._ribbon.target,\n            id: keys[_ribbon.target.index],\n            formattedValue: formatValue(_ribbon.target.value),\n        }\n\n        return {\n            ..._ribbon,\n            // ensure id remains the same even if source/target are reversed\n            id: [source.id, target.id].sort().join('.'),\n            source: {\n                ...source,\n                label: getLabel(source),\n                color: getColor(source),\n            },\n            target: {\n                ...target,\n                label: getLabel(target),\n                color: getColor(target),\n            },\n        }\n    })\n\n    return { arcs, ribbons }\n}\n\nexport const computeArcPath = ({\n    startAngle,\n    endAngle,\n    arcGenerator,\n}: SpringValues<Pick<ArcAnimatedProps, 'startAngle' | 'endAngle'>> & {\n    arcGenerator: ArcGenerator\n}) => to([startAngle, endAngle], (startAngle, endAngle) => arcGenerator({ startAngle, endAngle }))\n\nexport const computeRibbonPath = ({\n    sourceStartAngle,\n    sourceEndAngle,\n    targetStartAngle,\n    targetEndAngle,\n    ribbonGenerator,\n}: SpringValues<\n    Pick<\n        RibbonAnimatedProps,\n        'sourceStartAngle' | 'sourceEndAngle' | 'targetStartAngle' | 'targetEndAngle'\n    >\n> & {\n    ribbonGenerator: RibbonGenerator\n}) =>\n    to(\n        [sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle],\n        (sourceStartAngle, sourceEndAngle, targetStartAngle, targetEndAngle) =>\n            ribbonGenerator({\n                source: {\n                    startAngle: Math.min(sourceStartAngle, sourceEndAngle),\n                    endAngle: Math.max(sourceEndAngle, sourceStartAngle),\n                },\n                target: {\n                    startAngle: Math.min(targetStartAngle, targetEndAngle),\n                    endAngle: Math.max(targetEndAngle, targetStartAngle),\n                },\n            })\n    )\n","import { useMemo, useState } from 'react'\nimport {\n    useValueFormatter,\n    // @ts-ignore\n    getLabelGenerator,\n} from '@nivo/core'\nimport { OrdinalColorScale, useOrdinalColorScale } from '@nivo/colors'\nimport { computeChordLayout, computeChordGenerators, computeChordArcsAndRibbons } from './compute'\nimport { ArcDatum, ChordCommonProps, ChordDataProps, CustomLayerProps, RibbonDatum } from './types'\nimport { commonDefaultProps } from './defaults'\nimport { ChordLayout } from 'd3-chord'\n\nexport const useChordLayout = ({ padAngle }: { padAngle: ChordCommonProps['padAngle'] }) =>\n    useMemo(() => computeChordLayout({ padAngle }), [padAngle])\n\nexport const useChordGenerators = ({\n    width,\n    height,\n    innerRadiusRatio,\n    innerRadiusOffset,\n}: {\n    width: number\n    height: number\n    innerRadiusRatio: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset: ChordCommonProps['innerRadiusOffset']\n}) =>\n    useMemo(\n        () =>\n            computeChordGenerators({\n                width,\n                height,\n                innerRadiusRatio,\n                innerRadiusOffset,\n            }),\n        [width, height, innerRadiusRatio, innerRadiusOffset]\n    )\n\nexport const useChordArcsAndRibbons = ({\n    chord,\n    getColor,\n    keys,\n    data,\n    getLabel,\n    formatValue,\n}: {\n    chord: ChordLayout\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    getLabel: (arc: Omit<ArcDatum, 'label' | 'color'>) => string\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<Omit<ArcDatum, 'label' | 'color'>>\n}) =>\n    useMemo(\n        () =>\n            computeChordArcsAndRibbons({\n                chord,\n                data,\n                keys,\n                getLabel,\n                formatValue,\n                getColor,\n            }),\n        [chord, getColor, keys, data, getLabel, formatValue]\n    )\n\nexport const useChord = ({\n    data,\n    keys,\n    label = commonDefaultProps.label,\n    valueFormat,\n    width,\n    height,\n    innerRadiusRatio = commonDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = commonDefaultProps.innerRadiusOffset,\n    padAngle = commonDefaultProps.padAngle,\n    colors = commonDefaultProps.colors,\n}: {\n    data: ChordDataProps['data']\n    keys: ChordDataProps['keys']\n    label?: ChordCommonProps['label']\n    valueFormat?: ChordCommonProps['valueFormat']\n    width: number\n    height: number\n    innerRadiusRatio?: ChordCommonProps['innerRadiusRatio']\n    innerRadiusOffset?: ChordCommonProps['innerRadiusOffset']\n    padAngle?: ChordCommonProps['padAngle']\n    colors?: ChordCommonProps['colors']\n}) => {\n    const chord = useChordLayout({ padAngle })\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator } = useChordGenerators({\n        width,\n        height,\n        innerRadiusRatio,\n        innerRadiusOffset,\n    })\n    const getLabel = useMemo(() => getLabelGenerator(label), [label])\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const { arcs, ribbons } = useChordArcsAndRibbons({\n        chord,\n        getColor,\n        keys,\n        data,\n        getLabel,\n        formatValue,\n    })\n\n    return {\n        center,\n        chord,\n        radius,\n        innerRadius,\n        arcGenerator,\n        ribbonGenerator,\n        getColor,\n        arcs,\n        ribbons,\n    }\n}\n\nexport const useChordSelection = ({\n    arcOpacity = commonDefaultProps.arcOpacity,\n    activeArcOpacity = commonDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = commonDefaultProps.inactiveArcOpacity,\n    ribbons,\n    ribbonOpacity = commonDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = commonDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = commonDefaultProps.inactiveRibbonOpacity,\n}: {\n    arcOpacity?: ChordCommonProps['arcOpacity']\n    activeArcOpacity?: ChordCommonProps['activeArcOpacity']\n    inactiveArcOpacity?: ChordCommonProps['inactiveArcOpacity']\n    ribbons: RibbonDatum[]\n    ribbonOpacity?: ChordCommonProps['ribbonOpacity']\n    activeRibbonOpacity?: ChordCommonProps['activeRibbonOpacity']\n    inactiveRibbonOpacity?: ChordCommonProps['inactiveRibbonOpacity']\n}) => {\n    const [currentArc, setCurrentArc] = useState<ArcDatum | null>(null)\n    const [currentRibbon, setCurrentRibbon] = useState<RibbonDatum | null>(null)\n\n    const selection = useMemo(() => {\n        const selectedArcIds = []\n        const selectedRibbonIds = []\n\n        if (currentArc) {\n            selectedArcIds.push(currentArc.id)\n            ribbons\n                .filter(\n                    ribbon =>\n                        ribbon.source.id === currentArc.id || ribbon.target.id === currentArc.id\n                )\n                .forEach(ribbon => {\n                    selectedRibbonIds.push(ribbon.id)\n                })\n        }\n\n        if (currentRibbon) {\n            selectedArcIds.push(currentRibbon.source.id)\n            selectedArcIds.push(currentRibbon.target.id)\n            selectedRibbonIds.push(currentRibbon.id)\n        }\n\n        return { selectedArcIds, selectedRibbonIds }\n    }, [currentArc, currentRibbon, ribbons])\n\n    const hasSelection =\n        selection.selectedArcIds.length > 1 || selection.selectedRibbonIds.length > 0\n\n    const getArcOpacity = useMemo(\n        () => (arc: ArcDatum) => {\n            if (!hasSelection) return arcOpacity\n\n            return selection.selectedArcIds.includes(arc.id) ? activeArcOpacity : inactiveArcOpacity\n        },\n        [hasSelection, selection.selectedArcIds, arcOpacity, activeArcOpacity, inactiveArcOpacity]\n    )\n    const getRibbonOpacity = useMemo(\n        () => (ribbon: RibbonDatum) => {\n            if (!hasSelection) return ribbonOpacity\n\n            return selection.selectedRibbonIds.includes(ribbon.id)\n                ? activeRibbonOpacity\n                : inactiveRibbonOpacity\n        },\n        [\n            hasSelection,\n            selection.selectedRibbonIds,\n            ribbonOpacity,\n            activeRibbonOpacity,\n            inactiveRibbonOpacity,\n        ]\n    )\n\n    return {\n        currentArc,\n        setCurrentArc,\n        currentRibbon,\n        setCurrentRibbon,\n        hasSelection,\n        ...selection,\n        getArcOpacity,\n        getRibbonOpacity,\n    }\n}\n\nexport const useCustomLayerProps = ({\n    center,\n    radius,\n    arcs,\n    arcGenerator,\n    ribbons,\n    ribbonGenerator,\n}: {\n    center: [number, number]\n    radius: number\n    arcs: ArcDatum[]\n    arcGenerator: any\n    ribbons: RibbonDatum[]\n    ribbonGenerator: any\n}): CustomLayerProps =>\n    useMemo(\n        () => ({\n            center,\n            radius,\n            arcs,\n            arcGenerator,\n            ribbons,\n            ribbonGenerator,\n        }),\n        [center, radius, arcs, arcGenerator, ribbons, ribbonGenerator]\n    )\n","import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonAnimatedProps,\n    RibbonDatum,\n    RibbonGenerator,\n} from './types'\nimport { computeRibbonPath } from './compute'\n\ninterface ChordRibbonProps {\n    ribbon: RibbonDatum\n    ribbonGenerator: RibbonGenerator\n    animatedProps: SpringValues<RibbonAnimatedProps>\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbon = memo(\n    ({\n        ribbon,\n        ribbonGenerator,\n        animatedProps,\n        borderWidth,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(ribbon)\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseEnter?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { ribbon }), event)\n                onMouseMove?.(ribbon, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, ribbon, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(ribbon, event)\n            }\n        }, [isInteractive, hideTooltip, ribbon, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(ribbon, event)\n        }, [isInteractive, ribbon, onClick])\n\n        return (\n            <animated.path\n                data-testid={`ribbon.${ribbon.source.id}.${ribbon.target.id}`}\n                d={computeRibbonPath({\n                    sourceStartAngle: animatedProps.sourceStartAngle,\n                    sourceEndAngle: animatedProps.sourceEndAngle,\n                    targetStartAngle: animatedProps.targetStartAngle,\n                    targetEndAngle: animatedProps.targetEndAngle,\n                    ribbonGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport {\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordRibbon } from './ChordRibbon'\nimport {\n    ChordCommonProps,\n    ChordSvgProps,\n    RibbonDatum,\n    RibbonAnimatedProps,\n    RibbonGenerator,\n    ArcDatum,\n} from './types'\n\n/**\n * Used to get ribbon angles, instead of using source and target arcs,\n * we sort arcs by value to have smooth transitions, otherwise,\n * if source|target arc value becomes greater than the other,\n * the ribbon will be reversed.\n */\nconst getRibbonAngles = ({ source, target }: RibbonDatum, useMiddleAngle: boolean) => {\n    let firstArc: ArcDatum\n    let secondArc: ArcDatum\n    if (source.startAngle < target.startAngle) {\n        firstArc = source\n        secondArc = target\n    } else {\n        firstArc = target\n        secondArc = source\n    }\n\n    if (useMiddleAngle) {\n        const firstMiddleAngle = midAngle(firstArc)\n        const secondMiddleAngle = midAngle(secondArc)\n\n        return {\n            sourceStartAngle: firstMiddleAngle,\n            sourceEndAngle: firstMiddleAngle,\n            targetStartAngle: secondMiddleAngle,\n            targetEndAngle: secondMiddleAngle,\n        }\n    }\n\n    return {\n        sourceStartAngle: firstArc.startAngle,\n        sourceEndAngle: firstArc.endAngle,\n        targetStartAngle: secondArc.startAngle,\n        targetEndAngle: secondArc.endAngle,\n    }\n}\n\ninterface ChordRibbonsProps {\n    ribbons: RibbonDatum[]\n    ribbonGenerator: RibbonGenerator\n    borderWidth: ChordCommonProps['ribbonBorderWidth']\n    borderColor: ChordCommonProps['ribbonBorderColor']\n    getOpacity: (ribbon: RibbonDatum) => number\n    blendMode: NonNullable<ChordSvgProps['ribbonBlendMode']>\n    isInteractive: ChordCommonProps['isInteractive']\n    setCurrent: (ribbon: RibbonDatum | null) => void\n    tooltip: NonNullable<ChordSvgProps['ribbonTooltip']>\n    onMouseEnter: ChordSvgProps['onRibbonMouseEnter']\n    onMouseMove: ChordSvgProps['onRibbonMouseMove']\n    onMouseLeave: ChordSvgProps['onRibbonMouseLeave']\n    onClick: ChordSvgProps['onRibbonClick']\n}\n\nexport const ChordRibbons = memo(\n    ({\n        ribbons,\n        ribbonGenerator,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        blendMode,\n        isInteractive,\n        setCurrent,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordRibbonsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<RibbonDatum, RibbonAnimatedProps>(ribbons, {\n            keys: ribbon => ribbon.id,\n            initial: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            from: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            update: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: getOpacity(ribbon),\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            leave: ribbon => ({\n                ...getRibbonAngles(ribbon, false),\n                color: ribbon.source.color,\n                opacity: 0,\n                borderColor: getBorderColor(ribbon.source),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, ribbon) => (\n                    <ChordRibbon\n                        key={ribbon.id}\n                        ribbon={ribbon}\n                        ribbonGenerator={ribbonGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        blendMode={blendMode}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n","import { createElement, memo, useMemo, MouseEvent } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ArcAnimatedProps, ArcDatum, ArcGenerator, ChordCommonProps } from './types'\nimport { computeArcPath } from './compute'\n\ninterface ChordArcProps {\n    arc: ArcDatum\n    animatedProps: SpringValues<ArcAnimatedProps>\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArc = memo(\n    ({\n        arc,\n        animatedProps,\n        borderWidth,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(arc)\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseEnter?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseEnter, setCurrent])\n\n        const handleMouseMove = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                showTooltipFromEvent(createElement(tooltip, { arc }), event)\n                onMouseMove?.(arc, event)\n            }\n        }, [isInteractive, showTooltipFromEvent, tooltip, arc, onMouseMove])\n\n        const handleMouseLeave = useMemo(() => {\n            if (!isInteractive) return undefined\n\n            return (event: MouseEvent) => {\n                setCurrent(null)\n                hideTooltip()\n                onMouseLeave?.(arc, event)\n            }\n        }, [isInteractive, hideTooltip, arc, onMouseLeave, setCurrent])\n\n        const handleClick = useMemo(() => {\n            if (!isInteractive || !onClick) return undefined\n\n            return (event: MouseEvent) => onClick?.(arc, event)\n        }, [isInteractive, arc, onClick])\n\n        return (\n            <animated.path\n                data-testid={`arc.${arc.id}`}\n                d={computeArcPath({\n                    startAngle: animatedProps.startAngle,\n                    endAngle: animatedProps.endAngle,\n                    arcGenerator,\n                })}\n                fill={animatedProps.color}\n                opacity={animatedProps.opacity}\n                strokeWidth={borderWidth}\n                stroke={animatedProps.borderColor}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { ChordArc } from './ChordArc'\nimport { ArcDatum, ArcGenerator, ChordCommonProps, ArcAnimatedProps } from './types'\n\ninterface ChordArcsProps {\n    arcs: ArcDatum[]\n    arcGenerator: ArcGenerator\n    borderWidth: ChordCommonProps['arcBorderWidth']\n    borderColor: ChordCommonProps['arcBorderColor']\n    getOpacity: (arc: ArcDatum) => number\n    setCurrent: (arc: ArcDatum | null) => void\n    isInteractive: ChordCommonProps['isInteractive']\n    onMouseEnter?: ChordCommonProps['onArcMouseEnter']\n    onMouseMove?: ChordCommonProps['onArcMouseMove']\n    onMouseLeave?: ChordCommonProps['onArcMouseLeave']\n    onClick?: ChordCommonProps['onArcClick']\n    tooltip: ChordCommonProps['arcTooltip']\n}\n\nexport const ChordArcs = memo(\n    ({\n        arcs,\n        borderWidth,\n        borderColor,\n        getOpacity,\n        arcGenerator,\n        setCurrent,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        tooltip,\n    }: ChordArcsProps) => {\n        const { animate, config: springConfig } = useMotionConfig()\n\n        const theme = useTheme()\n        const getBorderColor = useInheritedColor(borderColor, theme)\n\n        const transition = useTransition<ArcDatum, ArcAnimatedProps>(arcs, {\n            keys: arc => arc.id,\n            initial: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            from: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            update: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: getOpacity(arc),\n                borderColor: getBorderColor(arc),\n            }),\n            leave: arc => ({\n                startAngle: arc.startAngle,\n                endAngle: arc.endAngle,\n                color: arc.color,\n                opacity: 0,\n                borderColor: getBorderColor(arc),\n            }),\n            expires: true,\n            config: springConfig,\n            immediate: !animate,\n        })\n\n        return (\n            <>\n                {transition((animatedProps, arc) => (\n                    <ChordArc\n                        key={arc.id}\n                        arc={arc}\n                        arcGenerator={arcGenerator}\n                        animatedProps={animatedProps}\n                        borderWidth={borderWidth}\n                        setCurrent={setCurrent}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                    />\n                ))}\n            </>\n        )\n    }\n)\n","import { memo, useMemo } from 'react'\nimport { useTransition, animated, to } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    useTheme,\n} from '@nivo/core'\nimport { useMotionConfig } from '@nivo/core'\nimport { ArcDatum, ChordCommonProps } from './types'\nimport { useInheritedColor } from '@nivo/colors'\n\ninterface ChordLabelsProps {\n    arcs: ArcDatum[]\n    radius: number\n    rotation: number\n    color: ChordCommonProps['labelTextColor']\n}\n\nexport const ChordLabels = memo(({ arcs, radius, rotation, color }: ChordLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    const labels = useMemo(\n        () =>\n            arcs.map(arc => {\n                const angle = midAngle(arc)\n                const textProps = getPolarLabelProps(radius, angle, rotation)\n\n                return {\n                    id: arc.id,\n                    label: arc.label,\n                    x: textProps.x,\n                    y: textProps.y,\n                    rotation: textProps.rotate,\n                    color: getColor(arc),\n                    textAnchor: textProps.align,\n                    dominantBaseline: textProps.baseline,\n                }\n            }),\n        [arcs, radius, rotation, getColor]\n    )\n\n    const transition = useTransition<\n        typeof labels[number],\n        {\n            x: number\n            y: number\n            rotation: number\n            color: string\n        }\n    >(labels, {\n        keys: label => label.id,\n        initial: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        from: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        enter: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        update: label => {\n            return {\n                x: label.x,\n                y: label.y,\n                rotation: label.rotation,\n                color: label.color,\n            }\n        },\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, label) => (\n                <animated.text\n                    key={label.id}\n                    data-testid={`label.${label.id}`}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: transitionProps.color,\n                    }}\n                    transform={to(\n                        [transitionProps.x, transitionProps.y, transitionProps.rotation],\n                        (x, y, rotation) => `translate(${x}, ${y}) rotate(${rotation})`\n                    )}\n                    textAnchor={label.textAnchor}\n                    dominantBaseline={label.dominantBaseline}\n                >\n                    {label.label}\n                </animated.text>\n            ))}\n        </>\n    )\n})\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { svgDefaultProps } from './defaults'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ChordRibbons } from './ChordRibbons'\nimport { ChordArcs } from './ChordArcs'\nimport { ChordLabels } from './ChordLabels'\nimport { ChordSvgProps, LayerId } from './types'\n\ntype InnerChordProps = Omit<ChordSvgProps, 'animate' | 'motionConfig' | 'renderWrapper' | 'theme'>\n\nconst InnerChord = ({\n    data,\n    keys,\n    label,\n    valueFormat,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    innerRadiusRatio = svgDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = svgDefaultProps.innerRadiusOffset,\n    padAngle = svgDefaultProps.padAngle,\n\n    layers = svgDefaultProps.layers,\n\n    colors = svgDefaultProps.colors,\n\n    arcBorderWidth = svgDefaultProps.arcBorderWidth,\n    arcBorderColor = svgDefaultProps.arcBorderColor,\n    arcOpacity = svgDefaultProps.arcOpacity,\n    activeArcOpacity = svgDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = svgDefaultProps.inactiveArcOpacity,\n    arcTooltip = svgDefaultProps.arcTooltip,\n\n    ribbonBorderWidth = svgDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = svgDefaultProps.ribbonBorderColor,\n    ribbonBlendMode = svgDefaultProps.ribbonBlendMode,\n    ribbonOpacity = svgDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = svgDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = svgDefaultProps.inactiveRibbonOpacity,\n    ribbonTooltip = svgDefaultProps.ribbonTooltip,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    labelOffset = svgDefaultProps.labelOffset,\n    labelRotation = svgDefaultProps.labelRotation,\n    labelTextColor = svgDefaultProps.labelTextColor,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    onRibbonMouseEnter,\n    onRibbonMouseMove,\n    onRibbonMouseLeave,\n    onRibbonClick,\n\n    legends = svgDefaultProps.legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerChordProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { setCurrentArc, setCurrentRibbon, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const customLayerProps = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    if (radius <= 0) return null\n\n    const legendData = arcs.map(arc => ({\n        id: arc.id,\n        label: arc.label,\n        color: arc.color,\n    }))\n\n    const layerById: Record<LayerId, ReactNode> = {\n        ribbons: null,\n        arcs: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('ribbons')) {\n        layerById.ribbons = (\n            <g key=\"ribbons\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordRibbons\n                    ribbons={ribbons}\n                    ribbonGenerator={ribbonGenerator}\n                    borderWidth={ribbonBorderWidth}\n                    borderColor={ribbonBorderColor}\n                    getOpacity={getRibbonOpacity}\n                    blendMode={ribbonBlendMode}\n                    setCurrent={setCurrentRibbon}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onRibbonMouseEnter}\n                    onMouseMove={onRibbonMouseMove}\n                    onMouseLeave={onRibbonMouseLeave}\n                    onClick={onRibbonClick}\n                    tooltip={ribbonTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <g key=\"arcs\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordArcs\n                    arcs={arcs}\n                    arcGenerator={arcGenerator}\n                    borderWidth={arcBorderWidth}\n                    borderColor={arcBorderColor}\n                    getOpacity={getArcOpacity}\n                    setCurrent={setCurrentArc}\n                    isInteractive={isInteractive}\n                    onMouseEnter={onArcMouseEnter}\n                    onMouseMove={onArcMouseMove}\n                    onMouseLeave={onArcMouseLeave}\n                    onClick={onArcClick}\n                    tooltip={arcTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('labels') && enableLabel) {\n        layerById.labels = (\n            <g key=\"labels\" transform={`translate(${center[0]}, ${center[1]})`}>\n                <ChordLabels\n                    arcs={arcs}\n                    radius={radius + labelOffset}\n                    rotation={labelRotation}\n                    color={labelTextColor}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends') && legends.length > 0) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Chord = ({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ChordSvgProps) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerChord isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useRef, useEffect, useCallback, MouseEvent } from 'react'\nimport {\n    useDimensions,\n    useTheme,\n    // @ts-ignore\n    midAngle,\n    // @ts-ignore\n    getPolarLabelProps,\n    degreesToRadians,\n    getRelativeCursor,\n    Margin,\n    Container,\n} from '@nivo/core'\nimport { findArcUnderCursor } from '@nivo/arcs'\nimport { useInheritedColor } from '@nivo/colors'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useChord, useChordSelection, useCustomLayerProps } from './hooks'\nimport { ArcDatum, ChordCanvasProps } from './types'\nimport { canvasDefaultProps } from './defaults'\n\nconst getArcFromMouseEvent = ({\n    event,\n    canvasEl,\n    center,\n    margin,\n    radius,\n    innerRadius,\n    arcs,\n}: {\n    event: MouseEvent\n    canvasEl: HTMLCanvasElement\n    center: [number, number]\n    margin: Margin\n    radius: number\n    innerRadius: number\n    arcs: ArcDatum[]\n}) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    const centerX = margin.left + center[0]\n    const centerY = margin.top + center[1]\n\n    return findArcUnderCursor(centerX, centerY, radius, innerRadius, arcs as any[], x, y)\n}\n\ntype InnerChordCanvasProps = Omit<ChordCanvasProps, 'renderWrapper' | 'theme'>\n\nconst InnerChordCanvas = ({\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    margin: partialMargin,\n    data,\n    keys,\n    width,\n    height,\n    label = canvasDefaultProps.label,\n    valueFormat,\n    innerRadiusRatio = canvasDefaultProps.innerRadiusRatio,\n    innerRadiusOffset = canvasDefaultProps.innerRadiusOffset,\n    padAngle = canvasDefaultProps.padAngle,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    arcBorderWidth = canvasDefaultProps.arcBorderWidth,\n    arcBorderColor = canvasDefaultProps.arcBorderColor,\n    arcOpacity = canvasDefaultProps.arcOpacity,\n    activeArcOpacity = canvasDefaultProps.activeArcOpacity,\n    inactiveArcOpacity = canvasDefaultProps.inactiveArcOpacity,\n    arcTooltip = canvasDefaultProps.arcTooltip,\n    ribbonBorderWidth = canvasDefaultProps.ribbonBorderWidth,\n    ribbonBorderColor = canvasDefaultProps.ribbonBorderColor,\n    ribbonOpacity = canvasDefaultProps.ribbonOpacity,\n    activeRibbonOpacity = canvasDefaultProps.activeRibbonOpacity,\n    inactiveRibbonOpacity = canvasDefaultProps.inactiveRibbonOpacity,\n    enableLabel = canvasDefaultProps.enableLabel,\n    labelOffset = canvasDefaultProps.labelOffset,\n    labelRotation = canvasDefaultProps.labelRotation,\n    labelTextColor = canvasDefaultProps.labelTextColor,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onArcMouseEnter,\n    onArcMouseMove,\n    onArcMouseLeave,\n    onArcClick,\n    legends = canvasDefaultProps.legends,\n}: InnerChordCanvasProps) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { center, radius, innerRadius, arcGenerator, ribbonGenerator, arcs, ribbons } = useChord({\n        data,\n        keys,\n        label,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        innerRadiusRatio,\n        innerRadiusOffset,\n        padAngle,\n        colors,\n    })\n\n    const { currentArc, setCurrentArc, getArcOpacity, getRibbonOpacity } = useChordSelection({\n        arcOpacity,\n        activeArcOpacity,\n        inactiveArcOpacity,\n        ribbons,\n        ribbonOpacity,\n        activeRibbonOpacity,\n        inactiveRibbonOpacity,\n    })\n\n    const theme = useTheme()\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const getArcBorderColor = useInheritedColor(arcBorderColor, theme)\n    const getRibbonBorderColor = useInheritedColor(ribbonBorderColor, theme)\n\n    const layerContext = useCustomLayerProps({\n        center,\n        radius,\n        arcs,\n        arcGenerator,\n        ribbons,\n        ribbonGenerator,\n    })\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        if (radius <= 0) return\n\n        layers.forEach(layer => {\n            if (layer === 'ribbons') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ribbonGenerator.context(ctx)\n                ribbons.forEach(ribbon => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getRibbonOpacity(ribbon)\n                    ctx.fillStyle = ribbon.source.color\n                    ctx.beginPath()\n                    ribbonGenerator(ribbon)\n                    ctx.fill()\n\n                    if (ribbonBorderWidth > 0) {\n                        ctx.strokeStyle = getRibbonBorderColor(ribbon.source)\n                        ctx.lineWidth = ribbonBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'arcs') {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                arcGenerator.context(ctx)\n                arcs.forEach(arc => {\n                    ctx.save()\n\n                    ctx.globalAlpha = getArcOpacity(arc)\n                    ctx.fillStyle = arc.color\n                    ctx.beginPath()\n                    arcGenerator(arc)\n                    ctx.fill()\n\n                    if (arcBorderWidth > 0) {\n                        ctx.strokeStyle = getArcBorderColor(arc)\n                        ctx.lineWidth = arcBorderWidth\n                        ctx.stroke()\n                    }\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'labels' && enableLabel === true) {\n                ctx.save()\n                ctx.translate(margin.left + center[0], margin.top + center[1])\n\n                ctx.font = `${theme.labels.text.fontSize}px ${\n                    theme.labels.text.fontFamily || 'sans-serif'\n                }`\n\n                arcs.forEach(arc => {\n                    const angle = midAngle(arc)\n                    const props = getPolarLabelProps(radius + labelOffset, angle, labelRotation)\n\n                    ctx.save()\n                    ctx.translate(props.x, props.y)\n                    ctx.rotate(degreesToRadians(props.rotate))\n\n                    ctx.textAlign = props.align\n                    ctx.textBaseline = props.baseline\n                    ctx.fillStyle = getLabelTextColor(arc)\n                    ctx.fillText(arc.label, 0, 0)\n\n                    ctx.restore()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'legends') {\n                ctx.save()\n                ctx.translate(margin.left, margin.top)\n\n                const legendData = arcs.map(arc => ({\n                    id: arc.id,\n                    label: arc.label,\n                    color: arc.color,\n                }))\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n\n                ctx.restore()\n            }\n\n            if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        center,\n        radius,\n        theme,\n        layers,\n        arcs,\n        arcGenerator,\n        getArcOpacity,\n        arcBorderWidth,\n        getArcBorderColor,\n        ribbons,\n        ribbonGenerator,\n        getRibbonOpacity,\n        ribbonBorderWidth,\n        getRibbonBorderColor,\n        enableLabel,\n        labelOffset,\n        labelRotation,\n        getLabelTextColor,\n        legends,\n        layerContext,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            if (canvasEl.current === null) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            if (arc) {\n                setCurrentArc(arc)\n                showTooltipFromEvent(createElement(arcTooltip, { arc }), event)\n                !currentArc && onArcMouseEnter && onArcMouseEnter(arc, event)\n                onArcMouseMove && onArcMouseMove(arc, event)\n                currentArc &&\n                    currentArc.id !== arc.id &&\n                    onArcMouseLeave &&\n                    onArcMouseLeave(arc, event)\n            } else {\n                setCurrentArc(null)\n                hideTooltip()\n                currentArc && onArcMouseLeave && onArcMouseLeave(currentArc, event)\n            }\n        },\n        [\n            canvasEl,\n            center,\n            margin,\n            radius,\n            innerRadius,\n            arcs,\n            setCurrentArc,\n            currentArc,\n            showTooltipFromEvent,\n            hideTooltip,\n            arcTooltip,\n            onArcMouseEnter,\n            onArcMouseMove,\n            onArcMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrentArc(null)\n        hideTooltip()\n    }, [setCurrentArc, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            if (canvasEl.current === null || !onArcClick) return\n\n            const arc = getArcFromMouseEvent({\n                event,\n                canvasEl: canvasEl.current,\n                center,\n                margin,\n                radius,\n                innerRadius,\n                arcs,\n            })\n\n            arc && onArcClick(arc, event)\n        },\n        [canvasEl, center, margin, radius, innerRadius, arcs, onArcClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ChordCanvas = ({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: ChordCanvasProps) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerChordCanvas isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Chord } from './Chord'\nimport { ChordSvgProps } from './types'\n\nexport const ResponsiveChord = (props: Omit<ChordSvgProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Chord {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ChordCanvas } from './ChordCanvas'\nimport { ChordCanvasProps } from './types'\n\nexport const ResponsiveChordCanvas = (props: Omit<ChordCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChordCanvas {...props} width={width} height={height} />}\n    </ResponsiveWrapper>\n)\n"],"names":["ChordArcTooltip","memo","arc","_jsx","BasicTooltip","id","label","value","formattedValue","color","enableChip","ChordRibbonTooltip","ribbon","TableTooltip","rows","Chip","source","target","commonDefaultProps","layers","padAngle","innerRadiusRatio","innerRadiusOffset","colors","scheme","arcOpacity","activeArcOpacity","inactiveArcOpacity","arcBorderWidth","arcBorderColor","from","modifiers","arcTooltip","ribbonOpacity","activeRibbonOpacity","inactiveRibbonOpacity","ribbonBorderWidth","ribbonBorderColor","ribbonBlendMode","enableLabel","labelOffset","labelRotation","labelTextColor","isInteractive","legends","animate","motionConfig","role","svgDefaultProps","ribbonTooltip","canvasDefaultProps","pixelRatio","window","devicePixelRatio","computeChordLayout","d3Chord","computeChordGenerators","width","height","center","radius","Math","min","innerRadius","ribbonRadius","arcGenerator","d3Arc","outerRadius","ribbonGenerator","d3Ribbon","computeChordArcsAndRibbons","chord","data","keys","getLabel","formatValue","getColor","_ribbons","arcs","groups","map","chordGroup","index","ribbons","_ribbon","sort","join","computeArcPath","startAngle","endAngle","to","computeRibbonPath","sourceStartAngle","sourceEndAngle","targetStartAngle","targetEndAngle","max","useChordLayout","useMemo","useChordGenerators","useChordArcsAndRibbons","useChord","valueFormat","getLabelGenerator","useValueFormatter","useOrdinalColorScale","useChordSelection","useState","currentArc","setCurrentArc","currentRibbon","setCurrentRibbon","selection","selectedArcIds","selectedRibbonIds","push","filter","forEach","hasSelection","length","getArcOpacity","includes","getRibbonOpacity","useCustomLayerProps","ChordRibbon","animatedProps","borderWidth","blendMode","setCurrent","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","animated","path","d","fill","opacity","strokeWidth","stroke","borderColor","style","mixBlendMode","getRibbonAngles","useMiddleAngle","firstArc","secondArc","firstMiddleAngle","midAngle","secondMiddleAngle","ChordRibbons","getOpacity","useMotionConfig","springConfig","config","theme","useTheme","getBorderColor","useInheritedColor","transition","useTransition","initial","update","leave","expires","immediate","ChordArc","ChordArcs","ChordLabels","rotation","labels","angle","textProps","getPolarLabelProps","x","y","rotate","textAnchor","align","dominantBaseline","baseline","enter","transitionProps","text","pointerEvents","transform","InnerChord","partialMargin","margin","onArcMouseEnter","onArcMouseMove","onArcMouseLeave","onArcClick","onRibbonMouseEnter","onRibbonMouseMove","onRibbonMouseLeave","onRibbonClick","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","customLayerProps","legendData","layerById","Fragment","legend","i","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Chord","renderWrapper","otherProps","Container","getArcFromMouseEvent","canvasEl","getRelativeCursor","centerX","left","centerY","top","findArcUnderCursor","InnerChordCanvas","useRef","getLabelTextColor","getArcBorderColor","getRibbonBorderColor","layerContext","useEffect","current","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","context","globalAlpha","beginPath","strokeStyle","lineWidth","restore","font","fontSize","fontFamily","props","degreesToRadians","textAlign","textBaseline","fillText","renderLegendToCanvas","handleMouseHover","useCallback","ref","cursor","undefined","ChordCanvas","ResponsiveWrapper"],"mappings":"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"}