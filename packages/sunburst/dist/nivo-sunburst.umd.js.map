{"version":3,"file":"nivo-sunburst.umd.js","sources":["../src/SunburstTooltip.tsx","../src/props.ts","../src/hooks.ts","../src/Arcs.tsx","../src/Sunburst.tsx","../src/ResponsiveSunburst.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SunburstTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { ArcTransitionMode } from '@nivo/arcs'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { SunburstTooltip } from './SunburstTooltip'\nimport { SunburstLayerId } from './types'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    cornerRadius: 0,\n    layers: ['arcs', 'arcLabels'] as SunburstLayerId[],\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    colorBy: 'id' as const,\n    inheritColorFromParent: true,\n    childColor: { from: 'color' },\n    borderWidth: 1,\n    borderColor: 'white',\n    enableArcLabels: false,\n    arcLabel: 'formattedValue',\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsSkipAngle: 0,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n    isInteractive: true,\n    defs: [],\n    fill: [],\n    tooltip: SunburstTooltip,\n    role: 'img',\n}\n","import { useMemo } from 'react'\nimport { partition as d3Partition, hierarchy as d3Hierarchy } from 'd3-hierarchy'\nimport cloneDeep from 'lodash/cloneDeep'\nimport sortBy from 'lodash/sortBy'\nimport { usePropertyAccessor, useTheme, useValueFormatter } from '@nivo/core'\nimport { Arc, useArcGenerator } from '@nivo/arcs'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport {\n    SunburstCommonProps,\n    ComputedDatum,\n    DataProps,\n    DatumId,\n    SunburstCustomLayerProps,\n} from './types'\nimport { defaultProps } from './props'\n\nexport const useSunburst = <RawDatum>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    radius,\n    cornerRadius = defaultProps.cornerRadius,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n}: {\n    data: DataProps<RawDatum>['data']\n    id?: DataProps<RawDatum>['id']\n    value?: DataProps<RawDatum>['value']\n    valueFormat?: DataProps<RawDatum>['valueFormat']\n    radius: number\n    cornerRadius?: SunburstCommonProps<RawDatum>['cornerRadius']\n    colors?: SunburstCommonProps<RawDatum>['colors']\n    colorBy?: SunburstCommonProps<RawDatum>['colorBy']\n    inheritColorFromParent?: SunburstCommonProps<RawDatum>['inheritColorFromParent']\n    childColor?: SunburstCommonProps<RawDatum>['childColor']\n}) => {\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>>(\n        colors,\n        colorBy\n    )\n    const getChildColor = useInheritedColor<ComputedDatum<RawDatum>>(childColor, theme)\n\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const nodes: ComputedDatum<RawDatum>[] = useMemo(() => {\n        // d3 mutates the data for performance reasons,\n        // however it does not work well with reactive programming,\n        // this ensures that we don't mutate the input data\n        const clonedData = cloneDeep(data)\n\n        const hierarchy = d3Hierarchy(clonedData).sum(getValue)\n\n        const partition = d3Partition<RawDatum>().size([2 * Math.PI, radius * radius])\n        // exclude root node\n        const descendants = partition(hierarchy).descendants().slice(1)\n\n        const total = hierarchy.value ?? 0\n\n        // It's important to sort node by depth,\n        // it ensures that we assign a parent node\n        // which has already been computed, because parent nodes\n        // are going to be computed first\n        const sortedNodes = sortBy(descendants, 'depth')\n\n        return sortedNodes.reduce<ComputedDatum<RawDatum>[]>((acc, descendant) => {\n            const id = getId(descendant.data)\n            // d3 hierarchy node value is optional by default as it depends on\n            // a call to `count()` or `sum()`, and we previously called `sum()`,\n            // d3 typings could be improved and make it non optional when calling\n            // one of those.\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const value = descendant.value!\n            const percentage = (100 * value) / total\n            const path = descendant.ancestors().map(ancestor => getId(ancestor.data))\n\n            const arc: Arc = {\n                startAngle: descendant.x0,\n                endAngle: descendant.x1,\n                innerRadius: Math.sqrt(descendant.y0),\n                outerRadius: Math.sqrt(descendant.y1),\n            }\n\n            let parent: ComputedDatum<RawDatum> | undefined\n            if (descendant.parent) {\n                // as the parent is defined by the input data, and we sorted the data\n                // by `depth`, we can safely assume it's defined.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                parent = acc.find(node => node.id === getId(descendant.parent!.data))\n            }\n\n            const normalizedNode: ComputedDatum<RawDatum> = {\n                id,\n                path,\n                value,\n                percentage,\n                formattedValue: valueFormat ? formatValue(value) : `${percentage.toFixed(2)}%`,\n                color: '',\n                arc,\n                data: descendant.data,\n                depth: descendant.depth,\n                height: descendant.height,\n            }\n\n            if (inheritColorFromParent && parent && normalizedNode.depth > 1) {\n                normalizedNode.color = getChildColor(parent, normalizedNode)\n            } else {\n                normalizedNode.color = getColor(normalizedNode)\n            }\n\n            return [...acc, normalizedNode]\n        }, [])\n    }, [\n        data,\n        radius,\n        getValue,\n        getId,\n        valueFormat,\n        formatValue,\n        getColor,\n        inheritColorFromParent,\n        getChildColor,\n    ])\n\n    const arcGenerator = useArcGenerator({ cornerRadius })\n\n    return { arcGenerator, nodes }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useSunburstLayerContext = <RawDatum>({\n    nodes,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n}: SunburstCustomLayerProps<RawDatum>): SunburstCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            nodes,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n        }),\n        [nodes, arcGenerator, centerX, centerY, radius]\n    )\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { ComputedDatum, SunburstCommonProps, MouseHandlers } from './types'\nimport { useTooltip } from '@nivo/tooltip'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: SunburstCommonProps<RawDatum>['borderWidth']\n    borderColor: SunburstCommonProps<RawDatum>['borderColor']\n    isInteractive: SunburstCommonProps<RawDatum>['isInteractive']\n    onClick?: MouseHandlers<RawDatum>['onClick']\n    onMouseEnter?: MouseHandlers<RawDatum>['onMouseEnter']\n    onMouseMove?: MouseHandlers<RawDatum>['onMouseMove']\n    onMouseLeave?: MouseHandlers<RawDatum>['onMouseLeave']\n    tooltip: SunburstCommonProps<RawDatum>['tooltip']\n    transitionMode: SunburstCommonProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, datum), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { ArcLabelsLayer } from '@nivo/arcs'\nimport { defaultProps } from './props'\nimport { useSunburst, useSunburstLayerContext } from './hooks'\nimport { SunburstSvgProps, SunburstLayerId, SunburstLayer, ComputedDatum } from './types'\nimport { Arcs } from './Arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\n\ntype InnerSunburstProps<RawDatum> = Partial<\n    Omit<\n        SunburstSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSunburst = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    cornerRadius = defaultProps.cornerRadius,\n    layers = defaultProps.layers as SunburstLayer<RawDatum>[],\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor,\n    margin: partialMargin,\n    width,\n    height,\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsComponent,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    transitionMode = defaultProps.transitionMode,\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n}: InnerSunburstProps<RawDatum>) => {\n    const { innerHeight, innerWidth, margin, outerHeight, outerWidth } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { centerX, centerY, radius } = useMemo(() => {\n        const radius = Math.min(innerWidth, innerHeight) / 2\n\n        return { radius, centerX: innerWidth / 2, centerY: innerHeight / 2 }\n    }, [innerHeight, innerWidth])\n\n    const { arcGenerator, nodes } = useSunburst({\n        data,\n        id,\n        value,\n        valueFormat,\n        radius,\n        cornerRadius,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const boundDefs = bindDefs(defs, nodes, fill, {\n        dataKey: '.',\n        colorKey: 'color',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<SunburstLayerId, ReactNode> = {\n        arcs: null,\n        arcLabels: null,\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={nodes}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                transitionMode={transitionMode}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseLeave={onMouseLeave}\n                onMouseMove={onMouseMove}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={nodes}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    const layerContext = useSunburstLayerContext<RawDatum>({\n        nodes,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            defs={boundDefs}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as SunburstLayerId] !== undefined) {\n                    return layerById[layer as SunburstLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sunburst = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSunburst<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Sunburst } from './Sunburst'\nimport { SunburstSvgProps } from './types'\n\ntype ResponsiveSunburstProps<RawDatum> = Partial<\n    Omit<SunburstSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<SunburstSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveSunburst = <RawDatum,>(props: ResponsiveSunburstProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Sunburst<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["defaultProps","id","value","cornerRadius","layers","colors","scheme","colorBy","inheritColorFromParent","childColor","from","borderWidth","borderColor","enableArcLabels","arcLabel","arcLabelsRadiusOffset","arcLabelsSkipAngle","arcLabelsTextColor","theme","animate","motionConfig","transitionMode","isInteractive","defs","fill","tooltip","formattedValue","color","_jsx","BasicTooltip","enableChip","role","useSunburst","data","valueFormat","radius","useTheme","getColor","useOrdinalColorScale","getChildColor","useInheritedColor","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","nodes","useMemo","clonedData","cloneDeep","hierarchy","d3Hierarchy","sum","descendants","d3Partition","size","Math","PI","partition","slice","total","sortBy","reduce","acc","descendant","parent","percentage","path","ancestors","map","ancestor","arc","startAngle","x0","endAngle","x1","innerRadius","sqrt","y0","outerRadius","y1","find","node","normalizedNode","toFixed","depth","height","arcGenerator","useArcGenerator","useSunburstLayerContext","centerX","centerY","Arcs","center","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","datum","event","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","ArcsLayer","InnerSunburst","partialMargin","margin","width","arcLabelsComponent","useDimensions","innerHeight","innerWidth","outerHeight","outerWidth","min","boundDefs","bindDefs","dataKey","colorKey","targetKey","layerById","arcs","arcLabels","includes","ArcLabelsLayer","label","radiusOffset","skipAngle","textColor","component","layerContext","SvgWrapper","layer","i","undefined","Fragment","Sunburst","renderWrapper","otherProps","Container","props","ResponsiveWrapper"],"mappings":"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"}