{"version":3,"file":"nivo-circle-packing.cjs.js","sources":["../src/hooks.ts","../src/props.ts","../src/CirclePackingTooltip.tsx","../src/Circles.tsx","../src/CircleSvg.tsx","../src/Labels.tsx","../src/LabelSvg.tsx","../src/CirclePacking.tsx","../src/CircleHtml.tsx","../src/LabelHtml.tsx","../src/CirclePackingHtml.tsx","../src/CirclePackingCanvas.tsx","../src/ResponsiveCirclePacking.tsx","../src/ResponsiveCirclePackingCanvas.tsx","../src/ResponsiveCirclePackingHtml.tsx"],"sourcesContent":["import { useMemo, MouseEvent, MutableRefObject, useCallback } from 'react'\nimport { pack as d3Pack, hierarchy as d3Hierarchy } from 'd3-hierarchy'\nimport cloneDeep from 'lodash/cloneDeep'\nimport sortBy from 'lodash/sortBy'\nimport {\n    usePropertyAccessor,\n    useValueFormatter,\n    useTheme,\n    getRelativeCursor,\n    getDistance,\n} from '@nivo/core'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    CirclePackingCommonProps,\n    CirclePackingCustomLayerProps,\n    ComputedDatum,\n    MouseHandlers,\n} from './types'\n\nexport const useCirclePacking = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    width,\n    height,\n    padding,\n    leavesOnly,\n    colors,\n    colorBy,\n    inheritColorFromParent,\n    childColor,\n}: {\n    data: CirclePackingCommonProps<RawDatum>['data']\n    id: CirclePackingCommonProps<RawDatum>['id']\n    value: CirclePackingCommonProps<RawDatum>['value']\n    valueFormat?: CirclePackingCommonProps<RawDatum>['valueFormat']\n    width: number\n    height: number\n    padding: CirclePackingCommonProps<RawDatum>['padding']\n    leavesOnly: CirclePackingCommonProps<RawDatum>['leavesOnly']\n    colors: CirclePackingCommonProps<RawDatum>['colors']\n    colorBy: CirclePackingCommonProps<RawDatum>['colorBy']\n    inheritColorFromParent: CirclePackingCommonProps<RawDatum>['inheritColorFromParent']\n    childColor: CirclePackingCommonProps<RawDatum>['childColor']\n}): ComputedDatum<RawDatum>[] => {\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>>(\n        colors,\n        colorBy\n    )\n    const theme = useTheme()\n    const getChildColor = useInheritedColor<ComputedDatum<RawDatum>>(childColor, theme)\n\n    // d3 mutates the data for performance reasons,\n    // however it does not work well with reactive programming,\n    // this ensures that we don't mutate the input data\n    const clonedData = cloneDeep(data)\n\n    const hierarchy = d3Hierarchy<RawDatum>(clonedData).sum(getValue)\n\n    const pack = d3Pack<RawDatum>().size([width, height]).padding(padding)\n    const packedData = pack(hierarchy)\n\n    const nodes = leavesOnly ? packedData.leaves() : packedData.descendants()\n\n    // It's important to sort node by depth,\n    // it ensures that we assign a parent node\n    // which has already been computed, because parent nodes\n    // are gonna be computed first\n    const sortedNodes = sortBy(nodes, 'depth')\n\n    const total = hierarchy.value ?? 0\n\n    const computedNodes = sortedNodes.reduce<ComputedDatum<RawDatum>[]>((acc, descendant) => {\n        const id = getId(descendant.data)\n        const value = descendant.value!\n        const percentage = (100 * value) / total\n        const path = descendant.ancestors().map(ancestor => getId(ancestor.data))\n\n        let parent: ComputedDatum<RawDatum> | undefined\n        if (descendant.parent) {\n            parent = acc.find(node => node.id === getId(descendant.parent!.data))\n        }\n\n        const normalizedNode: ComputedDatum<RawDatum> = {\n            id,\n            path,\n            value,\n            percentage,\n            formattedValue: valueFormat ? formatValue(value) : `${percentage.toFixed(2)}%`,\n            x: descendant.x,\n            y: descendant.y,\n            radius: descendant.r,\n            color: '',\n            data: descendant.data,\n            depth: descendant.depth,\n            height: descendant.height,\n        }\n\n        if (inheritColorFromParent && parent && normalizedNode.depth > 1) {\n            normalizedNode.color = getChildColor(parent)\n        } else {\n            normalizedNode.color = getColor(normalizedNode)\n        }\n\n        return [...acc, normalizedNode]\n    }, [])\n\n    return computedNodes\n}\n\nexport const useCirclePackingZoom = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    zoomedId: CirclePackingCommonProps<RawDatum>['zoomedId'],\n    width: number,\n    height: number\n) =>\n    useMemo(() => {\n        if (!zoomedId) return nodes\n\n        const zoomedNode = nodes.find(({ id }) => id === zoomedId)\n        if (!zoomedNode) return nodes\n\n        const ratio = Math.min(width, height) / (zoomedNode.radius * 2)\n        const offsetX = width / 2 - zoomedNode.x * ratio\n        const offsetY = height / 2 - zoomedNode.y * ratio\n\n        return nodes.map(node => ({\n            ...node,\n            x: node.x * ratio + offsetX,\n            y: node.y * ratio + offsetY,\n            radius: node.radius * ratio,\n        }))\n    }, [nodes, zoomedId, width, height])\n\nexport const useCirclePackingLabels = <RawDatum>({\n    nodes,\n    label,\n    filter,\n    skipRadius,\n    textColor,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    label: CirclePackingCommonProps<RawDatum>['label']\n    filter: CirclePackingCommonProps<RawDatum>['labelsFilter']\n    skipRadius: CirclePackingCommonProps<RawDatum>['labelsSkipRadius']\n    textColor: CirclePackingCommonProps<RawDatum>['labelTextColor']\n}) => {\n    const getLabel = usePropertyAccessor<ComputedDatum<RawDatum>, string | number>(label)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<ComputedDatum<RawDatum>>(textColor, theme)\n\n    // computing the labels\n    const labels = useMemo(\n        () =>\n            nodes\n                .filter(node => node.radius >= skipRadius)\n                .map(node => ({\n                    label: getLabel(node),\n                    textColor: getTextColor(node),\n                    node,\n                })),\n        [nodes, skipRadius, getLabel, getTextColor]\n    )\n\n    // apply extra filtering if provided\n    return useMemo(() => {\n        if (!filter) return labels\n\n        return labels.filter(filter)\n    }, [labels, filter])\n}\n\nexport const useNodeMouseHandlers = <RawDatum>(\n    node: ComputedDatum<RawDatum>,\n    { onMouseEnter, onMouseMove, onMouseLeave, onClick }: MouseHandlers<RawDatum>\n): Partial<\n    Record<'onMouseEnter' | 'onMouseMove' | 'onMouseLeave' | 'onClick', (event: MouseEvent) => void>\n> =>\n    useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter\n                ? (event: MouseEvent) => {\n                      onMouseEnter(node, event)\n                  }\n                : undefined,\n            onMouseMove: onMouseMove\n                ? (event: MouseEvent) => {\n                      onMouseMove(node, event)\n                  }\n                : undefined,\n            onMouseLeave: onMouseLeave\n                ? (event: MouseEvent) => {\n                      onMouseLeave(node, event)\n                  }\n                : undefined,\n            onClick: onClick\n                ? (event: MouseEvent) => {\n                      onClick(node, event)\n                  }\n                : undefined,\n        }),\n        [node, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\nexport const useMouseCircleDetection = <RawDatum>({\n    nodes,\n    canvasEl,\n    margin,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    canvasEl: MutableRefObject<HTMLCanvasElement | null>\n    margin: {\n        top: number\n        left: number\n    }\n}) => {\n    // we need to sort in order to detect higher nodes first\n    const sortedNodes = useMemo(() => sortBy(nodes, 'height'), [nodes])\n\n    return useCallback(\n        (event: MouseEvent) => {\n            if (!canvasEl.current) return null\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            return sortedNodes.find(node => {\n                const distanceFromNode = getDistance(\n                    node.x,\n                    node.y,\n                    x - margin.left,\n                    y - margin.top\n                )\n                return distanceFromNode <= node.radius\n            })\n        },\n        [canvasEl, margin, sortedNodes]\n    )\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useCirclePackingLayerContext = <RawDatum>({\n    nodes,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n}): CirclePackingCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            nodes,\n        }),\n        [nodes]\n    )\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingLayerId } from './types'\nimport { CirclePackingTooltip } from './CirclePackingTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    padding: 0,\n    leavesOnly: false,\n    layers: ['circles', 'labels'] as CirclePackingLayerId[],\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n    colorBy: 'depth' as const,\n    inheritColorFromParent: false,\n    childColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]],\n    },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]],\n    },\n    defs: [],\n    fill: [],\n    enableLabels: false,\n    label: 'id',\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1.6]],\n    },\n    labelsSkipRadius: 8,\n    isInteractive: true,\n    tooltip: CirclePackingTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const CirclePackingTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, CirclePackingCommonProps } from './types'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: CirclePackingCommonProps<RawDatum>['borderWidth']\n    borderColor: CirclePackingCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: CirclePackingCommonProps<RawDatum>['isInteractive']\n    tooltip: CirclePackingCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.radius,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth,\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\nimport { useNodeMouseHandlers } from './hooks'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    const handlers = useNodeMouseHandlers<RawDatum>(node, {\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    })\n\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={node.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { CirclePackingCommonProps, ComputedDatum, LabelComponent, ComputedLabel } from './types'\nimport { useCirclePackingLabels } from './hooks'\nimport { interpolateRadius } from './Circles'\n\ninterface CirclesProps<RawDatum> {\n    nodes: ComputedDatum<RawDatum>[]\n    label: CirclePackingCommonProps<RawDatum>['label']\n    filter?: CirclePackingCommonProps<RawDatum>['labelsFilter']\n    skipRadius: CirclePackingCommonProps<RawDatum>['labelsSkipRadius']\n    textColor: CirclePackingCommonProps<RawDatum>['labelTextColor']\n    component: LabelComponent<RawDatum>\n}\n\nconst getTransitionPhases = <RawDatum,>() => ({\n    enter: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 0,\n    }),\n    update: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 1,\n    }),\n    leave: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 0,\n    }),\n})\n\nexport const Labels = <RawDatum,>({\n    nodes,\n    label,\n    filter,\n    skipRadius,\n    textColor,\n    component,\n}: CirclesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useCirclePackingLabels({\n        nodes,\n        label,\n        filter,\n        skipRadius,\n        textColor,\n    })\n\n    const transitionPhases = useMemo(() => getTransitionPhases<RawDatum>(), [])\n\n    const transition = useTransition<\n        ComputedLabel<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            textColor: string\n            opacity: number\n        }\n    >(labels, {\n        keys: label => label.node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, label) => {\n                return createElement(component, {\n                    key: label.node.id,\n                    label: label.label,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                    },\n                    node: label.node,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { LabelProps } from './types'\n\nexport const LabelSvg = <RawDatum,>({ node, label, style }: LabelProps<RawDatum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.text\n            key={node.id}\n            x={style.x}\n            y={style.y}\n            textAnchor=\"middle\"\n            dominantBaseline=\"central\"\n            style={{\n                ...theme.labels.text,\n                fill: style.textColor,\n                opacity: style.opacity,\n                pointerEvents: 'none',\n            }}\n        >\n            {label}\n        </animated.text>\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingLayerId, CirclePackingSvgProps, ComputedDatum } from './types'\nimport { useCirclePacking, useCirclePackingZoom, useCirclePackingLayerContext } from './hooks'\nimport { defaultProps } from './props'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { Labels } from './Labels'\nimport { LabelSvg } from './LabelSvg'\n\ntype InnerCirclePackingProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerCirclePacking = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    circleComponent = CircleSvg,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    labelComponent = LabelSvg,\n    layers = defaultProps.layers,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n}: InnerCirclePackingProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, zoomedNodes, fill, { targetKey: 'fill' }),\n        [defs, zoomedNodes, fill]\n    )\n\n    const layerById: Record<CirclePackingLayerId, ReactNode> = {\n        circles: null,\n        labels: null,\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={zoomedNodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                component={circleComponent}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (enableLabels && layers.includes('labels')) {\n        layerById.labels = (\n            <Labels<RawDatum>\n                key=\"labels\"\n                nodes={zoomedNodes}\n                label={label}\n                filter={labelsFilter}\n                skipRadius={labelsSkipRadius}\n                textColor={labelTextColor}\n                component={labelComponent}\n            />\n        )\n    }\n\n    const layerContext = useCirclePackingLayerContext<RawDatum>({\n        nodes,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as CirclePackingLayerId] !== undefined) {\n                    return layerById[layer as CirclePackingLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const CirclePacking = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n        renderWrapper={renderWrapper}\n        theme={theme}\n    >\n        <InnerCirclePacking<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { animated, to, SpringValue, Interpolation } from '@react-spring/web'\nimport { CircleProps } from './types'\nimport { useNodeMouseHandlers } from './hooks'\n\nexport const interpolatePosition = (\n    positionValue: SpringValue<number>,\n    radiusValue: Interpolation<number>\n) => to([positionValue, radiusValue], (position, radius) => position - radius)\n\nexport const interpolateSize = (radiusValue: Interpolation<number>) =>\n    to([radiusValue], radius => radius * 2)\n\nexport const interpolateBorderWidth = (borderWidth: number, radiusValue: Interpolation<number>) =>\n    to([radiusValue], radius => Math.min(borderWidth, radius))\n\nexport const CircleHtml = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    const size = interpolateSize(style.radius)\n\n    const handlers = useNodeMouseHandlers<RawDatum>(node, {\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    })\n\n    return (\n        <animated.div\n            style={{\n                position: 'absolute',\n                top: interpolatePosition(style.y, style.radius),\n                left: interpolatePosition(style.x, style.radius),\n                height: size,\n                width: size,\n                borderRadius: style.radius,\n                backgroundColor: style.color,\n                borderWidth: interpolateBorderWidth(style.borderWidth, style.radius),\n                borderStyle: 'solid',\n                borderColor: style.borderColor,\n                boxSizing: 'border-box',\n            }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { LabelProps } from './types'\nimport { interpolatePosition, interpolateSize } from './CircleHtml'\n\nexport const LabelHtml = <RawDatum,>({ node, label, style }: LabelProps<RawDatum>) => {\n    const theme = useTheme()\n    const size = interpolateSize(style.radius)\n\n    return (\n        <animated.div\n            key={node.id}\n            style={{\n                ...theme.labels.text,\n                position: 'absolute',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                top: interpolatePosition(style.y, style.radius),\n                left: interpolatePosition(style.x, style.radius),\n                width: size,\n                height: size,\n                color: style.textColor,\n                opacity: style.opacity,\n                pointerEvents: 'none',\n            }}\n        >\n            {label}\n        </animated.div>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingHtmlProps, CirclePackingLayerId, ComputedDatum } from './types'\nimport { useCirclePacking, useCirclePackingLayerContext, useCirclePackingZoom } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleHtml } from './CircleHtml'\nimport { defaultProps } from './props'\nimport { Labels } from './Labels'\nimport { LabelHtml } from './LabelHtml'\n\ntype InnerCirclePackingHtmlProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingHtmlProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerCirclePackingHtml = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    circleComponent = CircleHtml,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    labelComponent = LabelHtml,\n    layers = defaultProps.layers,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n}: InnerCirclePackingHtmlProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const layerById: Record<CirclePackingLayerId, ReactNode> = {\n        circles: null,\n        labels: null,\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={zoomedNodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                component={circleComponent}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (enableLabels && layers.includes('labels')) {\n        layerById.labels = (\n            <Labels<RawDatum>\n                key=\"labels\"\n                nodes={zoomedNodes}\n                label={label}\n                filter={labelsFilter}\n                skipRadius={labelsSkipRadius}\n                textColor={labelTextColor}\n                component={labelComponent}\n            />\n        )\n    }\n\n    const layerContext = useCirclePackingLayerContext<RawDatum>({\n        nodes,\n    })\n\n    return (\n        <div\n            role={role}\n            style={{\n                position: 'relative',\n                overflow: 'hidden',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div\n                style={{\n                    position: 'absolute',\n                    top: margin.top,\n                    left: margin.left,\n                }}\n            >\n                {layers.map((layer, i) => {\n                    if (layerById[layer as CirclePackingLayerId] !== undefined) {\n                        return layerById[layer as CirclePackingLayerId]\n                    }\n\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                    }\n\n                    return null\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const CirclePackingHtml = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: Partial<Omit<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n        theme={theme}\n    >\n        <InnerCirclePackingHtml<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { useCallback, useEffect, useRef, createElement } from 'react'\nimport * as React from 'react'\nimport { useDimensions, useTheme, Container } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { CirclePackingCanvasProps, ComputedDatum } from './types'\nimport { defaultProps } from './props'\nimport {\n    useCirclePacking,\n    useCirclePackingZoom,\n    useCirclePackingLabels,\n    useMouseCircleDetection,\n} from './hooks'\n\ntype InnerCirclePackingCanvasProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingCanvasProps<RawDatum>,\n        'data' | 'width' | 'height' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>\n\nconst InnerCirclePackingCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerCirclePackingCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const labels = useCirclePackingLabels({\n        nodes: zoomedNodes,\n        label,\n        filter: labelsFilter,\n        skipRadius: labelsSkipRadius,\n        textColor: labelTextColor,\n    })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        zoomedNodes.forEach(node => {\n            if (borderWidth > 0) {\n                ctx.strokeStyle = getBorderColor(node)\n                ctx.lineWidth = borderWidth\n            }\n\n            ctx.beginPath()\n            ctx.arc(node.x, node.y, node.radius, 0, 2 * Math.PI)\n            ctx.fillStyle = node.color\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableLabels) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            labels.forEach(label => {\n                ctx.fillStyle = label.textColor\n                ctx.fillText(`${label.label}`, label.node.x, label.node.y)\n            })\n        }\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        theme,\n        pixelRatio,\n        zoomedNodes,\n        enableLabels,\n        labels,\n        borderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useMouseCircleDetection<RawDatum>({\n        nodes: zoomedNodes,\n        canvasEl,\n        margin,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onMouseMove?.(node, event)\n                showTooltipFromEvent(createElement(tooltip, node), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, showTooltipFromEvent, tooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!onClick) return\n\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const CirclePackingCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    ...otherProps\n}: Partial<Omit<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={isInteractive} theme={theme}>\n        <InnerCirclePackingCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingSvgProps } from './types'\nimport { CirclePacking } from './CirclePacking'\n\ntype ResponsiveCirclePackingProps<RawDatum> = Partial<\n    Omit<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePacking = <RawDatum,>(\n    props: ResponsiveCirclePackingProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePacking<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingCanvasProps } from './types'\nimport { CirclePackingCanvas } from './CirclePackingCanvas'\n\ntype ResponsiveCirclePackingCanvasProps<RawDatum> = Partial<\n    Omit<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePackingCanvas = <RawDatum,>(\n    props: ResponsiveCirclePackingCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePackingCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingHtmlProps } from './types'\nimport { CirclePackingHtml } from './CirclePackingHtml'\n\ntype ResponsiveCirclePackingHtmlProps<RawDatum> = Partial<\n    Omit<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePackingHtml = <RawDatum,>(\n    props: ResponsiveCirclePackingHtmlProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePackingHtml<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["useCirclePacking","data","id","value","valueFormat","width","height","padding","leavesOnly","colors","colorBy","inheritColorFromParent","childColor","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","theme","useTheme","getChildColor","useInheritedColor","clonedData","cloneDeep","hierarchy","d3Hierarchy","sum","packedData","d3Pack","size","pack","nodes","leaves","descendants","sortedNodes","sortBy","total","computedNodes","reduce","acc","descendant","parent","percentage","path","ancestors","map","ancestor","find","node","normalizedNode","formattedValue","toFixed","x","y","radius","r","color","depth","useCirclePackingZoom","zoomedId","useMemo","zoomedNode","ratio","Math","min","offsetX","offsetY","useCirclePackingLabels","label","filter","skipRadius","textColor","getLabel","getTextColor","labels","useNodeMouseHandlers","onMouseEnter","onMouseMove","onMouseLeave","onClick","event","undefined","useMouseCircleDetection","canvasEl","margin","useCallback","current","getRelativeCursor","getDistance","left","top","useCirclePackingLayerContext","defaultProps","layers","scheme","from","modifiers","borderWidth","borderColor","defs","fill","enableLabels","labelTextColor","labelsSkipRadius","isInteractive","tooltip","_jsx","BasicTooltip","enableChip","animate","motionConfig","role","pixelRatio","window","devicePixelRatio","interpolateRadius","radiusValue","to","max","Circles","component","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","handleClick","useMotionConfig","springConfig","config","getBorderColor","transitionPhases","enter","opacity","update","leave","getTransitionPhases","transition","useTransition","keys","initial","immediate","transitionProps","React","key","style","CircleSvg","handlers","animated","circle","cx","cy","stroke","strokeWidth","Labels","LabelSvg","text","textAnchor","dominantBaseline","pointerEvents","InnerCirclePacking","partialMargin","circleComponent","labelsFilter","labelComponent","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","zoomedNodes","boundDefs","bindDefs","targetKey","layerById","circles","includes","layerContext","SvgWrapper","layer","i","Fragment","CirclePacking","renderWrapper","otherProps","Container","interpolatePosition","positionValue","position","interpolateSize","CircleHtml","div","borderRadius","backgroundColor","borderStyle","boxSizing","LabelHtml","display","justifyContent","alignItems","InnerCirclePackingHtml","overflow","CirclePackingHtml","InnerCirclePackingCanvas","useRef","useEffect","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","forEach","strokeStyle","lineWidth","beginPath","arc","PI","textAlign","textBaseline","font","fontSize","fontFamily","fillText","getNodeFromMouseEvent","handleMouseHover","ref","cursor","CirclePackingCanvas","props","ResponsiveWrapper"],"mappings":"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"}