{"version":3,"file":"nivo-sankey.es.js","sources":["../src/SankeyNodeTooltip.tsx","../src/SankeyLinkTooltip.tsx","../src/props.ts","../src/hooks.ts","../src/SankeyNodesItem.tsx","../src/SankeyNodes.tsx","../src/SankeyLinkGradient.tsx","../src/SankeyLinksItem.tsx","../src/SankeyLinks.tsx","../src/links.ts","../src/SankeyLabels.tsx","../src/Sankey.tsx","../src/ResponsiveSankey.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyNodeDatum } from './types'\n\nexport interface SankeyNodeTooltipProps<N extends DefaultNode, L extends DefaultLink> {\n    node: SankeyNodeDatum<N, L>\n}\n\nexport const SankeyNodeTooltip = <N extends DefaultNode, L extends DefaultLink>({\n    node,\n}: SankeyNodeTooltipProps<N, L>) => (\n    <BasicTooltip id={node.label} enableChip={true} color={node.color} />\n)\n","import { BasicTooltip, Chip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyLinkDatum } from './types'\n\nconst tooltipStyles = {\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    sourceChip: {\n        marginRight: 7,\n    },\n    targetChip: {\n        marginLeft: 7,\n        marginRight: 7,\n    },\n}\n\nexport interface SankeyLinkTooltipProps<N extends DefaultNode, L extends DefaultLink> {\n    link: SankeyLinkDatum<N, L>\n}\n\nexport const SankeyLinkTooltip = <N extends DefaultNode, L extends DefaultLink>({\n    link,\n}: SankeyLinkTooltipProps<N, L>) => (\n    <BasicTooltip\n        id={\n            <span style={tooltipStyles.container}>\n                <Chip color={link.source.color} style={tooltipStyles.sourceChip} />\n                <strong>{link.source.label}</strong>\n                {' > '}\n                <strong>{link.target.label}</strong>\n                <Chip color={link.target.color} style={tooltipStyles.targetChip} />\n                <strong>{link.formattedValue}</strong>\n            </span>\n        }\n    />\n)\n","import { sankeyCenter, sankeyJustify, sankeyLeft, sankeyRight } from 'd3-sankey'\nimport { SankeyLayerId, SankeyNodeDatum, SankeyAlignType } from './types'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { SankeyNodeTooltip } from './SankeyNodeTooltip'\nimport { SankeyLinkTooltip } from './SankeyLinkTooltip'\n\nexport const sankeyAlignmentPropMapping = {\n    center: sankeyCenter,\n    justify: sankeyJustify,\n    start: sankeyLeft,\n    end: sankeyRight,\n}\n\nexport const sankeyAlignmentPropKeys = Object.keys(sankeyAlignmentPropMapping) as SankeyAlignType[]\n\nexport const sankeyAlignmentFromProp = (prop: SankeyAlignType) => sankeyAlignmentPropMapping[prop]\n\nexport const svgDefaultProps = {\n    layout: 'horizontal' as const,\n    align: 'center' as const,\n    sort: 'auto' as const,\n\n    colors: { scheme: 'nivo' as const },\n\n    nodeOpacity: 0.75,\n    nodeHoverOpacity: 1,\n    nodeHoverOthersOpacity: 0.15,\n    nodeThickness: 12,\n    nodeSpacing: 12,\n    nodeInnerPadding: 0,\n    nodeBorderWidth: 1,\n    nodeBorderColor: { from: 'color', modifiers: [['darker', 0.5]] } as InheritedColorConfig<\n        SankeyNodeDatum<any, any>\n    >,\n    nodeBorderRadius: 0,\n\n    linkOpacity: 0.25,\n    linkHoverOpacity: 0.6,\n    linkHoverOthersOpacity: 0.15,\n    linkContract: 0,\n    linkBlendMode: 'multiply' as const,\n    enableLinkGradient: false,\n\n    enableLabels: true,\n    label: 'id',\n    labelPosition: 'inside' as const,\n    labelPadding: 9,\n    labelOrientation: 'horizontal' as const,\n    labelTextColor: { from: 'color', modifiers: [['darker', 0.8]] } as InheritedColorConfig<\n        SankeyNodeDatum<any, any>\n    >,\n\n    isInteractive: true,\n    nodeTooltip: SankeyNodeTooltip,\n    linkTooltip: SankeyLinkTooltip,\n\n    legends: [],\n\n    layers: ['links', 'nodes', 'labels', 'legends'] as SankeyLayerId[],\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { useState, useMemo } from 'react'\nimport { cloneDeep } from 'lodash'\nimport { sankey as d3Sankey } from 'd3-sankey'\nimport { useTheme, usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { sankeyAlignmentFromProp } from './props'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyAlignFunction,\n    SankeyCommonProps,\n    SankeyDataProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n    SankeySortFunction,\n} from './types'\n\nconst getId = <N extends DefaultNode>(node: N) => node.id\n\nexport const computeNodeAndLinks = <N extends DefaultNode, L extends DefaultLink>({\n    data: _data,\n    formatValue,\n    layout,\n    alignFunction,\n    sortFunction,\n    linkSortMode,\n    nodeThickness,\n    nodeSpacing,\n    nodeInnerPadding,\n    width,\n    height,\n    getColor,\n    getLabel,\n}: {\n    data: SankeyDataProps<N, L>['data']\n    formatValue: (value: number) => string\n    layout: SankeyCommonProps<N, L>['layout']\n    alignFunction: SankeyAlignFunction\n    sortFunction: null | undefined | SankeySortFunction<N, L>\n    linkSortMode: null | undefined\n    nodeThickness: SankeyCommonProps<N, L>['nodeThickness']\n    nodeSpacing: SankeyCommonProps<N, L>['nodeSpacing']\n    nodeInnerPadding: SankeyCommonProps<N, L>['nodeInnerPadding']\n    width: number\n    height: number\n    getColor: (node: Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>) => string\n    getLabel: (node: Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>) => string\n}) => {\n    const sankey = d3Sankey()\n        .nodeAlign(alignFunction)\n        // @ts-ignore: this method signature is incorrect in current @types/d3-sankey\n        .nodeSort(sortFunction)\n        // @ts-ignore: this method is not available in current @types/d3-sankey\n        .linkSort(linkSortMode)\n        .nodeWidth(nodeThickness)\n        .nodePadding(nodeSpacing)\n        .size(layout === 'horizontal' ? [width, height] : [height, width])\n        .nodeId(getId)\n\n    // deep clone is required as the sankey diagram mutates data\n    // we need a different identity for correct updates\n    const data = cloneDeep(_data) as unknown as {\n        nodes: SankeyNodeDatum<N, L>[]\n        links: SankeyLinkDatum<N, L>[]\n    }\n    sankey(data)\n\n    data.nodes.forEach(node => {\n        node.color = getColor(node)\n        node.label = getLabel(node)\n        node.formattedValue = formatValue(node.value)\n\n        if (layout === 'horizontal') {\n            node.x = node.x0 + nodeInnerPadding\n            node.y = node.y0\n            node.width = Math.max(node.x1 - node.x0 - nodeInnerPadding * 2, 0)\n            node.height = Math.max(node.y1 - node.y0, 0)\n        } else {\n            node.x = node.y0\n            node.y = node.x0 + nodeInnerPadding\n            node.width = Math.max(node.y1 - node.y0, 0)\n            node.height = Math.max(node.x1 - node.x0 - nodeInnerPadding * 2, 0)\n\n            const oldX0 = node.x0\n            const oldX1 = node.x1\n\n            node.x0 = node.y0\n            node.x1 = node.y1\n            node.y0 = oldX0\n            node.y1 = oldX1\n        }\n    })\n\n    data.links.forEach(link => {\n        link.formattedValue = formatValue(link.value)\n        link.color = link.source.color\n        // @ts-ignore\n        link.pos0 = link.y0\n        // @ts-ignore\n        link.pos1 = link.y1\n        // @ts-ignore\n        link.thickness = link.width\n        // @ts-ignore\n        delete link.y0\n        // @ts-ignore\n        delete link.y1\n        // @ts-ignore\n        delete link.width\n    })\n\n    return data\n}\n\nexport const useSankey = <N extends DefaultNode, L extends DefaultLink>({\n    data,\n    valueFormat,\n    layout,\n    width,\n    height,\n    sort,\n    align,\n    colors,\n    nodeThickness,\n    nodeSpacing,\n    nodeInnerPadding,\n    nodeBorderColor,\n    label,\n    labelTextColor,\n}: {\n    data: SankeyDataProps<N, L>['data']\n    valueFormat?: SankeyCommonProps<N, L>['valueFormat']\n    layout: SankeyCommonProps<N, L>['layout']\n    width: number\n    height: number\n    sort: SankeyCommonProps<N, L>['sort']\n    align: SankeyCommonProps<N, L>['align']\n    colors: SankeyCommonProps<N, L>['colors']\n    nodeThickness: SankeyCommonProps<N, L>['nodeThickness']\n    nodeSpacing: SankeyCommonProps<N, L>['nodeSpacing']\n    nodeInnerPadding: SankeyCommonProps<N, L>['nodeInnerPadding']\n    nodeBorderColor: SankeyCommonProps<N, L>['nodeBorderColor']\n    label: SankeyCommonProps<N, L>['label']\n    labelTextColor: SankeyCommonProps<N, L>['labelTextColor']\n}) => {\n    const [currentNode, setCurrentNode] = useState<SankeyNodeDatum<N, L> | null>(null)\n    const [currentLink, setCurrentLink] = useState<SankeyLinkDatum<N, L> | null>(null)\n\n    const sortFunction = useMemo(() => {\n        if (sort === 'auto') return undefined\n        if (sort === 'input') return null\n        if (sort === 'ascending') {\n            return (a: SankeyNodeDatum<N, L>, b: SankeyNodeDatum<N, L>) => a.value - b.value\n        }\n        if (sort === 'descending') {\n            return (a: SankeyNodeDatum<N, L>, b: SankeyNodeDatum<N, L>) => b.value - a.value\n        }\n\n        return sort\n    }, [sort])\n\n    // If \"input\" sorting is used, apply this setting to links, too.\n    // (In d3, `null` means input sorting and `undefined` is the default)\n    const linkSortMode = sort === 'input' ? null : undefined\n\n    const alignFunction = useMemo(() => {\n        if (typeof align === 'function') return align\n        return sankeyAlignmentFromProp(align)\n    }, [align])\n\n    const theme = useTheme()\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getNodeBorderColor = useInheritedColor(nodeBorderColor, theme)\n\n    const getLabel = usePropertyAccessor<Omit<SankeyNodeDatum<N, L>, 'color' | 'label'>, string>(\n        label\n    )\n    const getLabelTextColor = useInheritedColor(labelTextColor, theme)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const { nodes, links } = useMemo(\n        () =>\n            computeNodeAndLinks<N, L>({\n                data,\n                formatValue,\n                layout,\n                alignFunction,\n                sortFunction,\n                linkSortMode,\n                nodeThickness,\n                nodeSpacing,\n                nodeInnerPadding,\n                width,\n                height,\n                getColor,\n                getLabel,\n            }),\n        [\n            data,\n            formatValue,\n            layout,\n            alignFunction,\n            sortFunction,\n            linkSortMode,\n            nodeThickness,\n            nodeSpacing,\n            nodeInnerPadding,\n            width,\n            height,\n            getColor,\n            getLabel,\n        ]\n    )\n\n    const legendData = useMemo(\n        () =>\n            nodes.map(node => ({\n                id: node.id,\n                label: node.label,\n                color: node.color,\n            })),\n        [nodes]\n    )\n\n    return {\n        nodes,\n        links,\n        legendData,\n        getNodeBorderColor,\n        currentNode,\n        setCurrentNode,\n        currentLink,\n        setCurrentLink,\n        getLabelTextColor,\n    }\n}\n","import { createElement, useCallback } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyNodeDatum } from './types'\n\ninterface SankeyNodesItemProps<N extends DefaultNode, L extends DefaultLink> {\n    node: SankeyNodeDatum<N, L>\n    x: number\n    y: number\n    width: number\n    height: number\n    color: string\n    opacity: number\n    borderWidth: SankeyCommonProps<N, L>['nodeBorderWidth']\n    borderColor: string\n    borderRadius: SankeyCommonProps<N, L>['nodeBorderRadius']\n    setCurrent: (node: SankeyNodeDatum<N, L> | null) => void\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['nodeTooltip']\n}\n\nexport const SankeyNodesItem = <N extends DefaultNode, L extends DefaultLink>({\n    node,\n    x,\n    y,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    borderRadius,\n    setCurrent,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyNodesItemProps<N, L>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedProps = useSpring({\n        x,\n        y,\n        width,\n        height,\n        opacity,\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            setCurrent(node)\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [setCurrent, node, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event, 'left')\n        },\n        [showTooltipFromEvent, node, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrent(null)\n        hideTooltip()\n    }, [setCurrent, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            onClick?.(node, event)\n        },\n        [onClick, node]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            rx={borderRadius}\n            ry={borderRadius}\n            width={animatedProps.width.to(v => Math.max(v, 0))}\n            height={animatedProps.height.to(v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            fillOpacity={animatedProps.opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            strokeOpacity={opacity}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import {\n    DefaultLink,\n    DefaultNode,\n    SankeyCommonProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n} from './types'\nimport { SankeyNodesItem } from './SankeyNodesItem'\n\ninterface SankeyNodesProps<N extends DefaultNode, L extends DefaultLink> {\n    nodes: SankeyNodeDatum<N, L>[]\n    nodeOpacity: SankeyCommonProps<N, L>['nodeOpacity']\n    nodeHoverOpacity: SankeyCommonProps<N, L>['nodeHoverOpacity']\n    nodeHoverOthersOpacity: SankeyCommonProps<N, L>['nodeHoverOthersOpacity']\n    borderWidth: SankeyCommonProps<N, L>['nodeBorderWidth']\n    getBorderColor: (node: SankeyNodeDatum<N, L>) => string\n    borderRadius: SankeyCommonProps<N, L>['nodeBorderRadius']\n    setCurrentNode: (node: SankeyNodeDatum<N, L> | null) => void\n    currentNode: SankeyNodeDatum<N, L> | null\n    currentLink: SankeyLinkDatum<N, L> | null\n    isCurrentNode: (node: SankeyNodeDatum<N, L>) => boolean\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['nodeTooltip']\n}\n\nexport const SankeyNodes = <N extends DefaultNode, L extends DefaultLink>({\n    nodes,\n    nodeOpacity,\n    nodeHoverOpacity,\n    nodeHoverOthersOpacity,\n    borderWidth,\n    getBorderColor,\n    borderRadius,\n    setCurrentNode,\n    currentNode,\n    currentLink,\n    isCurrentNode,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyNodesProps<N, L>) => {\n    const getOpacity = (node: SankeyNodeDatum<N, L>) => {\n        if (!currentNode && !currentLink) return nodeOpacity\n        if (isCurrentNode(node)) return nodeHoverOpacity\n        return nodeHoverOthersOpacity\n    }\n\n    return (\n        <>\n            {nodes.map(node => (\n                <SankeyNodesItem<N, L>\n                    key={node.id}\n                    node={node}\n                    x={node.x}\n                    y={node.y}\n                    width={node.width}\n                    height={node.height}\n                    color={node.color}\n                    opacity={getOpacity(node)}\n                    borderWidth={borderWidth}\n                    borderColor={getBorderColor(node)}\n                    borderRadius={borderRadius}\n                    setCurrent={setCurrentNode}\n                    isInteractive={isInteractive}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            ))}\n        </>\n    )\n}\n","import { SankeyCommonProps } from './types'\n\ninterface SankeyLinkGradientProps {\n    id: string\n    layout: SankeyCommonProps<any, any>['layout']\n    startColor: string\n    endColor: string\n}\n\nexport const SankeyLinkGradient = ({\n    id,\n    layout,\n    startColor,\n    endColor,\n}: SankeyLinkGradientProps) => {\n    let gradientProps: {\n        x1: string\n        x2: string\n        y1: string\n        y2: string\n    }\n    if (layout === 'horizontal') {\n        gradientProps = {\n            x1: '0%',\n            x2: '100%',\n            y1: '0%',\n            y2: '0%',\n        }\n    } else {\n        gradientProps = {\n            x1: '0%',\n            x2: '0%',\n            y1: '0%',\n            y2: '100%',\n        }\n    }\n\n    return (\n        <linearGradient id={id} spreadMethod=\"pad\" {...gradientProps}>\n            <stop offset=\"0%\" stopColor={startColor} />\n            <stop offset=\"100%\" stopColor={endColor} />\n        </linearGradient>\n    )\n}\n","import { createElement, useCallback } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { SankeyLinkGradient } from './SankeyLinkGradient'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyLinkDatum } from './types'\n\ninterface SankeyLinksItemProps<N extends DefaultNode, L extends DefaultLink> {\n    link: SankeyLinkDatum<N, L>\n    layout: SankeyCommonProps<N, L>['layout']\n    path: string\n    color: string\n    opacity: number\n    blendMode: SankeyCommonProps<N, L>['linkBlendMode']\n    enableGradient: SankeyCommonProps<N, L>['enableLinkGradient']\n    setCurrent: (link: SankeyLinkDatum<N, L> | null) => void\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n    tooltip: SankeyCommonProps<N, L>['linkTooltip']\n}\n\nexport const SankeyLinksItem = <N extends DefaultNode, L extends DefaultLink>({\n    link,\n    layout,\n    path,\n    color,\n    opacity,\n    blendMode,\n    enableGradient,\n    setCurrent,\n    tooltip,\n    isInteractive,\n    onClick,\n}: SankeyLinksItemProps<N, L>) => {\n    const linkId = `${link.source.id}.${link.target.id}`\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        opacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            setCurrent(link)\n            showTooltipFromEvent(createElement(tooltip, { link }), event, 'left')\n        },\n        [setCurrent, link, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { link }), event, 'left')\n        },\n        [showTooltipFromEvent, link, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setCurrent(null)\n        hideTooltip()\n    }, [setCurrent, hideTooltip])\n\n    const handleClick = useCallback(\n        event => {\n            onClick?.(link, event)\n        },\n        [onClick, link]\n    )\n\n    return (\n        <>\n            {enableGradient && (\n                <SankeyLinkGradient\n                    id={linkId}\n                    layout={layout}\n                    startColor={link.startColor || link.source.color}\n                    endColor={link.endColor || link.target.color}\n                />\n            )}\n            <animated.path\n                fill={enableGradient ? `url(\"#${encodeURI(linkId)}\")` : animatedProps.color}\n                d={animatedPath}\n                fillOpacity={animatedProps.opacity}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                style={{ mixBlendMode: blendMode }}\n            />\n        </>\n    )\n}\n","import { sankeyLinkHorizontal, sankeyLinkVertical } from './links'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyCommonProps,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n} from './types'\nimport { SankeyLinksItem } from './SankeyLinksItem'\nimport { useMemo } from 'react'\n\ninterface SankeyLinksProps<N extends DefaultNode, L extends DefaultLink> {\n    layout: SankeyCommonProps<N, L>['layout']\n    links: SankeyLinkDatum<N, L>[]\n    linkOpacity: SankeyCommonProps<N, L>['linkOpacity']\n    linkHoverOpacity: SankeyCommonProps<N, L>['linkHoverOpacity']\n    linkHoverOthersOpacity: SankeyCommonProps<N, L>['linkHoverOthersOpacity']\n    linkContract: SankeyCommonProps<N, L>['linkContract']\n    linkBlendMode: SankeyCommonProps<N, L>['linkBlendMode']\n    enableLinkGradient: SankeyCommonProps<N, L>['enableLinkGradient']\n    tooltip: SankeyCommonProps<N, L>['linkTooltip']\n    setCurrentLink: (link: SankeyLinkDatum<N, L> | null) => void\n    currentLink: SankeyLinkDatum<N, L> | null\n    currentNode: SankeyNodeDatum<N, L> | null\n    isCurrentLink: (link: SankeyLinkDatum<N, L>) => boolean\n    isInteractive: SankeyCommonProps<N, L>['isInteractive']\n    onClick?: SankeyCommonProps<N, L>['onClick']\n}\n\nexport const SankeyLinks = <N extends DefaultNode, L extends DefaultLink>({\n    links,\n    layout,\n    linkOpacity,\n    linkHoverOpacity,\n    linkHoverOthersOpacity,\n    linkContract,\n    linkBlendMode,\n    enableLinkGradient,\n    setCurrentLink,\n    currentLink,\n    currentNode,\n    isCurrentLink,\n    isInteractive,\n    onClick,\n    tooltip,\n}: SankeyLinksProps<N, L>) => {\n    const getOpacity = (link: SankeyLinkDatum<N, L>) => {\n        if (!currentNode && !currentLink) return linkOpacity\n        if (isCurrentLink(link)) return linkHoverOpacity\n        return linkHoverOthersOpacity\n    }\n\n    const getLinkPath = useMemo(\n        () => (layout === 'horizontal' ? sankeyLinkHorizontal() : sankeyLinkVertical()),\n        [layout]\n    )\n\n    return (\n        <>\n            {links.map(link => (\n                <SankeyLinksItem<N, L>\n                    key={`${link.source.id}.${link.target.id}`}\n                    link={link}\n                    layout={layout}\n                    path={getLinkPath(link, linkContract)}\n                    color={link.color}\n                    opacity={getOpacity(link)}\n                    blendMode={linkBlendMode}\n                    enableGradient={enableLinkGradient}\n                    setCurrent={setCurrentLink}\n                    isInteractive={isInteractive}\n                    onClick={onClick}\n                    tooltip={tooltip}\n                />\n            ))}\n        </>\n    )\n}\n","import { line, curveMonotoneX, curveMonotoneY } from 'd3-shape'\nimport { DefaultLink, DefaultNode, SankeyLinkDatum } from './types'\n\nexport const sankeyLinkHorizontal = <N extends DefaultNode, L extends DefaultLink>() => {\n    const lineGenerator = line().curve(curveMonotoneX)\n\n    return (link: SankeyLinkDatum<N, L>, contract: number) => {\n        const thickness = Math.max(1, link.thickness - contract * 2)\n        const halfThickness = thickness / 2\n        const linkLength = link.target.x0 - link.source.x1\n        const padLength = linkLength * 0.12\n\n        const dots: [number, number][] = [\n            [link.source.x1, link.pos0 - halfThickness],\n            [link.source.x1 + padLength, link.pos0 - halfThickness],\n            [link.target.x0 - padLength, link.pos1 - halfThickness],\n            [link.target.x0, link.pos1 - halfThickness],\n            [link.target.x0, link.pos1 + halfThickness],\n            [link.target.x0 - padLength, link.pos1 + halfThickness],\n            [link.source.x1 + padLength, link.pos0 + halfThickness],\n            [link.source.x1, link.pos0 + halfThickness],\n            [link.source.x1, link.pos0 - halfThickness],\n        ]\n\n        return lineGenerator(dots) + 'Z'\n    }\n}\n\nexport const sankeyLinkVertical = <N extends DefaultNode, L extends DefaultLink>() => {\n    const lineGenerator = line().curve(curveMonotoneY)\n\n    return (link: SankeyLinkDatum<N, L>, contract: number) => {\n        const thickness = Math.max(1, link.thickness - contract * 2)\n        const halfThickness = thickness / 2\n        const linkLength = link.target.y0 - link.source.y1\n        const padLength = linkLength * 0.12\n\n        const dots: [number, number][] = [\n            [link.pos0 + halfThickness, link.source.y1],\n            [link.pos0 + halfThickness, link.source.y1 + padLength],\n            [link.pos1 + halfThickness, link.target.y0 - padLength],\n            [link.pos1 + halfThickness, link.target.y0],\n            [link.pos1 - halfThickness, link.target.y0],\n            [link.pos1 - halfThickness, link.target.y0 - padLength],\n            [link.pos0 - halfThickness, link.source.y1 + padLength],\n            [link.pos0 - halfThickness, link.source.y1],\n            [link.pos0 + halfThickness, link.source.y1],\n        ]\n\n        return lineGenerator(dots) + 'Z'\n    }\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { DefaultLink, DefaultNode, SankeyCommonProps, SankeyNodeDatum } from './types'\n\ninterface SankeyLabelsProps<N extends DefaultNode, L extends DefaultLink> {\n    nodes: SankeyNodeDatum<N, L>[]\n    layout: SankeyCommonProps<N, L>['layout']\n    width: number\n    height: number\n    labelPosition: SankeyCommonProps<N, L>['labelPosition']\n    labelPadding: SankeyCommonProps<N, L>['labelPadding']\n    labelOrientation: SankeyCommonProps<N, L>['labelOrientation']\n    getLabelTextColor: (node: SankeyNodeDatum<N, L>) => string\n}\n\nexport const SankeyLabels = <N extends DefaultNode, L extends DefaultLink>({\n    nodes,\n    layout,\n    width,\n    height,\n    labelPosition,\n    labelPadding,\n    labelOrientation,\n    getLabelTextColor,\n}: SankeyLabelsProps<N, L>) => {\n    const theme = useTheme()\n\n    const labelRotation = labelOrientation === 'vertical' ? -90 : 0\n    const labels = nodes.map(node => {\n        let x\n        let y\n        let textAnchor\n        if (layout === 'horizontal') {\n            y = node.y + node.height / 2\n            if (node.x < width / 2) {\n                if (labelPosition === 'inside') {\n                    x = node.x1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'start'\n                } else {\n                    x = node.x - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'end'\n                }\n            } else {\n                if (labelPosition === 'inside') {\n                    x = node.x - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'end'\n                } else {\n                    x = node.x1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'middle' : 'start'\n                }\n            }\n        } else if (layout === 'vertical') {\n            x = node.x + node.width / 2\n            if (node.y < height / 2) {\n                if (labelPosition === 'inside') {\n                    y = node.y1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'end' : 'middle'\n                } else {\n                    y = node.y - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'start' : 'middle'\n                }\n            } else {\n                if (labelPosition === 'inside') {\n                    y = node.y - labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'start' : 'middle'\n                } else {\n                    y = node.y1 + labelPadding\n                    textAnchor = labelOrientation === 'vertical' ? 'end' : 'middle'\n                }\n            }\n        }\n\n        return {\n            id: node.id,\n            label: node.label,\n            x,\n            y,\n            textAnchor,\n            color: getLabelTextColor(node),\n        }\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y}) rotate(${labelRotation})`,\n            color: label.color,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        key={label.id}\n                        dominantBaseline=\"central\"\n                        textAnchor={label.textAnchor}\n                        transform={animatedProps.transform}\n                        style={{\n                            ...theme.labels.text,\n                            fill: animatedProps.color,\n                            pointerEvents: 'none',\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { uniq } from 'lodash'\nimport { SvgWrapper, useDimensions, Container } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { svgDefaultProps } from './props'\nimport { useSankey } from './hooks'\nimport { SankeyNodes } from './SankeyNodes'\nimport { SankeyLinks } from './SankeyLinks'\nimport { SankeyLabels } from './SankeyLabels'\nimport {\n    DefaultLink,\n    DefaultNode,\n    SankeyLayerId,\n    SankeyLinkDatum,\n    SankeyNodeDatum,\n    SankeySvgProps,\n} from './types'\n\ntype InnerSankeyProps<N extends DefaultNode, L extends DefaultLink> = Omit<\n    SankeySvgProps<N, L>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerSankey = <N extends DefaultNode, L extends DefaultLink>({\n    data,\n    valueFormat,\n    layout = svgDefaultProps.layout,\n    sort = svgDefaultProps.sort,\n    align = svgDefaultProps.align,\n    width,\n    height,\n    margin: partialMargin,\n    colors = svgDefaultProps.colors,\n    nodeThickness = svgDefaultProps.nodeThickness,\n    nodeSpacing = svgDefaultProps.nodeThickness,\n    nodeInnerPadding = svgDefaultProps.nodeInnerPadding,\n    nodeBorderColor = svgDefaultProps.nodeBorderColor,\n    nodeOpacity = svgDefaultProps.nodeOpacity,\n    nodeHoverOpacity = svgDefaultProps.nodeHoverOpacity,\n    nodeHoverOthersOpacity = svgDefaultProps.nodeHoverOthersOpacity,\n    nodeBorderWidth = svgDefaultProps.nodeBorderWidth,\n    nodeBorderRadius = svgDefaultProps.nodeBorderRadius,\n    linkOpacity = svgDefaultProps.linkOpacity,\n    linkHoverOpacity = svgDefaultProps.linkHoverOpacity,\n    linkHoverOthersOpacity = svgDefaultProps.linkHoverOthersOpacity,\n    linkContract = svgDefaultProps.linkContract,\n    linkBlendMode = svgDefaultProps.linkBlendMode,\n    enableLinkGradient = svgDefaultProps.enableLinkGradient,\n    enableLabels = svgDefaultProps.enableLabels,\n    labelPosition = svgDefaultProps.labelPosition,\n    labelPadding = svgDefaultProps.labelPadding,\n    labelOrientation = svgDefaultProps.labelOrientation,\n    label = svgDefaultProps.label,\n    labelTextColor = svgDefaultProps.labelTextColor,\n    nodeTooltip = svgDefaultProps.nodeTooltip,\n    linkTooltip = svgDefaultProps.linkTooltip,\n    isInteractive = svgDefaultProps.isInteractive,\n    onClick,\n    legends = svgDefaultProps.legends,\n    layers = svgDefaultProps.layers,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerSankeyProps<N, L>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        nodes,\n        links,\n        legendData,\n        getNodeBorderColor,\n        currentNode,\n        setCurrentNode,\n        currentLink,\n        setCurrentLink,\n        getLabelTextColor,\n    } = useSankey<N, L>({\n        data,\n        valueFormat,\n        layout,\n        width: innerWidth,\n        height: innerHeight,\n        sort,\n        align,\n        colors,\n        nodeThickness,\n        nodeSpacing,\n        nodeInnerPadding,\n        nodeBorderColor,\n        label,\n        labelTextColor,\n    })\n\n    let isCurrentNode: (node: SankeyNodeDatum<N, L>) => boolean = () => false\n    let isCurrentLink: (link: SankeyLinkDatum<N, L>) => boolean = () => false\n\n    if (currentLink) {\n        isCurrentNode = ({ id }: SankeyNodeDatum<N, L>) =>\n            id === currentLink.source.id || id === currentLink.target.id\n        isCurrentLink = ({ source, target }: SankeyLinkDatum<N, L>) =>\n            source.id === currentLink.source.id && target.id === currentLink.target.id\n    }\n\n    if (currentNode) {\n        let currentNodeIds = [currentNode.id]\n        links\n            .filter(\n                ({ source, target }) => source.id === currentNode.id || target.id === currentNode.id\n            )\n            .forEach(({ source, target }) => {\n                currentNodeIds.push(source.id)\n                currentNodeIds.push(target.id)\n            })\n\n        currentNodeIds = uniq(currentNodeIds)\n        isCurrentNode = ({ id }) => currentNodeIds.includes(id)\n        isCurrentLink = ({ source, target }) =>\n            source.id === currentNode.id || target.id === currentNode.id\n    }\n\n    const layerProps = {\n        links,\n        nodes,\n        margin,\n        width,\n        height,\n        outerWidth,\n        outerHeight,\n    }\n\n    const layerById: Record<SankeyLayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        labels: null,\n        legends: null,\n    }\n\n    if (layers.includes('links')) {\n        layerById.links = (\n            <SankeyLinks<N, L>\n                key=\"links\"\n                links={links}\n                layout={layout}\n                linkContract={linkContract}\n                linkOpacity={linkOpacity}\n                linkHoverOpacity={linkHoverOpacity}\n                linkHoverOthersOpacity={linkHoverOthersOpacity}\n                linkBlendMode={linkBlendMode}\n                enableLinkGradient={enableLinkGradient}\n                setCurrentLink={setCurrentLink}\n                currentNode={currentNode}\n                currentLink={currentLink}\n                isCurrentLink={isCurrentLink}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                tooltip={linkTooltip}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <SankeyNodes<N, L>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeOpacity={nodeOpacity}\n                nodeHoverOpacity={nodeHoverOpacity}\n                nodeHoverOthersOpacity={nodeHoverOthersOpacity}\n                borderWidth={nodeBorderWidth}\n                borderRadius={nodeBorderRadius}\n                getBorderColor={getNodeBorderColor}\n                setCurrentNode={setCurrentNode}\n                currentNode={currentNode}\n                currentLink={currentLink}\n                isCurrentNode={isCurrentNode}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                tooltip={nodeTooltip}\n            />\n        )\n    }\n\n    if (layers.includes('labels') && enableLabels) {\n        layerById.labels = (\n            <SankeyLabels<N, L>\n                key=\"labels\"\n                nodes={nodes}\n                layout={layout}\n                width={innerWidth}\n                height={innerHeight}\n                labelPosition={labelPosition}\n                labelPadding={labelPadding}\n                labelOrientation={labelOrientation}\n                getLabelTextColor={getLabelTextColor}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={`legend${i}`}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Sankey = <N extends DefaultNode = DefaultNode, L extends DefaultLink = DefaultLink>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: SankeySvgProps<N, L>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerSankey<N, L> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { DefaultLink, DefaultNode, SankeySvgProps } from './types'\nimport { Sankey } from './Sankey'\n\nexport const ResponsiveSankey = <\n    N extends DefaultNode = DefaultNode,\n    L extends DefaultLink = DefaultLink\n>(\n    props: Omit<SankeySvgProps<N, L>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Sankey<N, L> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["tooltipStyles","container","display","alignItems","sourceChip","marginRight","targetChip","marginLeft","sankeyAlignmentPropMapping","center","sankeyCenter","justify","sankeyJustify","start","sankeyLeft","end","sankeyRight","sankeyAlignmentPropKeys","Object","keys","sankeyAlignmentFromProp","prop","svgDefaultProps","layout","align","sort","colors","scheme","nodeOpacity","nodeHoverOpacity","nodeHoverOthersOpacity","nodeThickness","nodeSpacing","nodeInnerPadding","nodeBorderWidth","nodeBorderColor","from","modifiers","nodeBorderRadius","linkOpacity","linkHoverOpacity","linkHoverOthersOpacity","linkContract","linkBlendMode","enableLinkGradient","enableLabels","label","labelPosition","labelPadding","labelOrientation","labelTextColor","isInteractive","nodeTooltip","node","_jsx","BasicTooltip","id","enableChip","color","linkTooltip","link","_jsxs","style","Chip","source","target","formattedValue","legends","layers","role","animate","motionConfig","getId","useSankey","data","valueFormat","width","height","useState","currentNode","setCurrentNode","currentLink","setCurrentLink","sortFunction","useMemo","a","b","value","linkSortMode","undefined","alignFunction","theme","useTheme","getColor","useOrdinalColorScale","getNodeBorderColor","useInheritedColor","getLabel","usePropertyAccessor","getLabelTextColor","formatValue","useValueFormatter","_data","sankey","d3Sankey","nodeAlign","nodeSort","linkSort","nodeWidth","nodePadding","size","nodeId","_cloneDeep","nodes","forEach","x","x0","y","y0","Math","max","x1","y1","oldX0","oldX1","links","pos0","pos1","thickness","computeNodeAndLinks","legendData","map","SankeyNodesItem","opacity","borderWidth","borderColor","borderRadius","setCurrent","onClick","tooltip","useMotionConfig","springConfig","config","animatedProps","useSpring","immediate","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","event","createElement","handleMouseMove","handleMouseLeave","handleClick","animated","rect","rx","ry","to","v","fill","fillOpacity","strokeWidth","stroke","strokeOpacity","onMouseEnter","onMouseMove","onMouseLeave","SankeyNodes","getBorderColor","isCurrentNode","getOpacity","SankeyLinkGradient","startColor","endColor","spreadMethod","x2","y2","offset","stopColor","SankeyLinksItem","path","blendMode","enableGradient","linkId","animatedPath","useAnimatedPath","encodeURI","d","mixBlendMode","SankeyLinks","isCurrentLink","getLinkPath","lineGenerator","line","curve","curveMonotoneX","contract","halfThickness","padLength","dots","curveMonotoneY","sankeyLinkVertical","SankeyLabels","labelRotation","labels","textAnchor","springs","useSprings","length","transform","index","text","dominantBaseline","pointerEvents","InnerSankey","partialMargin","margin","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","currentNodeIds","filter","push","_uniq","includes","layerProps","layerById","Fragment","legend","i","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Sankey","renderWrapper","otherProps","Container","ResponsiveSankey","props","ResponsiveWrapper"],"mappings":"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"}