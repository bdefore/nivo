{"version":3,"file":"nivo-swarmplot.es.js","sources":["../src/SwarmPlotTooltip.tsx","../src/props.ts","../src/compute.ts","../src/hooks.ts","../src/Circles.tsx","../src/CircleSvg.tsx","../src/SwarmPlotAnnotations.tsx","../src/SwarmPlot.tsx","../src/ResponsiveSwarmPlot.tsx","../src/SwarmPlotCanvas.tsx","../src/ResponsiveSwarmPlotCanvas.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SwarmPlotTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { ScaleLinearSpec } from '@nivo/scales'\nimport { SwarmPlotLayerId } from './types'\nimport { SwarmPlotTooltip } from './SwarmPlotTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    valueScale: { type: 'linear', min: 0, max: 'auto' } as ScaleLinearSpec,\n    groupBy: 'group',\n    size: 6,\n    spacing: 2,\n    layout: 'vertical' as const,\n    gap: 0,\n    forceStrength: 1,\n    simulationIterations: 120,\n    colors: { scheme: 'nivo' },\n    colorBy: 'group',\n    borderWidth: 0,\n    borderColor: 'rgba(0, 0, 0, 0)',\n    layers: ['grid', 'axes', 'circles', 'annotations', 'mesh'] as SwarmPlotLayerId[],\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: {},\n    axisBottom: {},\n    axisLeft: {},\n    isInteractive: true,\n    useMesh: false,\n    debugMesh: false,\n    tooltip: SwarmPlotTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    annotations: [],\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isString from 'lodash/isString'\nimport get from 'lodash/get'\nimport { scaleLinear, ScaleOrdinal, scaleOrdinal } from 'd3-scale'\nimport { forceSimulation, forceX, forceY, forceCollide, ForceX, ForceY } from 'd3-force'\nimport {\n    computeScale,\n    createDateNormalizer,\n    generateSeriesAxis,\n    ScaleLinear,\n    ScaleLinearSpec,\n    ScaleTime,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { ComputedDatum, PreSimulationDatum, SizeSpec, SimulationForces } from './types'\n\nconst getParsedValue = (scaleSpec: ScaleLinearSpec | ScaleTimeSpec) => {\n    if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        return createDateNormalizer(scaleSpec) as <T>(value: T) => T\n    }\n\n    return <T>(value: T) => value\n}\n\nexport const computeOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) => {\n    if (!Array.isArray(groups) || groups.length === 0) {\n        throw new Error(`'groups' should be an array containing at least one item`)\n    }\n\n    const groupCount = groups.length\n\n    let groupSize: number\n    if (axis === 'x') {\n        groupSize = (height - gap * (groupCount - 1)) / groupCount\n    } else if (axis === 'y') {\n        groupSize = (width - gap * (groupCount - 1)) / groupCount\n    }\n\n    const range = groups.map((_, i) => i * (groupSize + gap) + groupSize / 2)\n\n    return scaleOrdinal(range).domain(groups)\n}\n\nexport const computeValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) => {\n    const values = data.map(getValue)\n\n    if (scale.type === 'time') {\n        const series = [\n            { data: values.map(value => ({ data: { x: null, y: null, [axis]: value } })) },\n        ]\n        const axes = generateSeriesAxis(series, axis, scale)\n\n        return computeScale(scale, axes, axis === 'x' ? width : height, axis) as ScaleTime<\n            Date | string\n        >\n    }\n\n    const min = Math.min(...(values as number[]))\n    const max = Math.max(...(values as number[]))\n\n    return computeScale(\n        scale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    ) as ScaleLinear<number>\n}\n\nexport const getSizeGenerator = <RawDatum>(size: SizeSpec<RawDatum>) => {\n    // user defined size function\n    if (typeof size === 'function') {\n        return size\n    }\n\n    // static size\n    if (isNumber(size)) {\n        return () => size\n    }\n\n    // dynamic size based on config\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'Size is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'Size is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'Size is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (d: RawDatum) => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('Size is invalid, it should be either a function, a number or an object')\n}\n\nexport const computeForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}): SimulationForces<RawDatum> => {\n    const collisionForce = forceCollide<PreSimulationDatum<RawDatum>>(d => d.size / 2 + spacing / 2)\n\n    let xForce: ForceX<PreSimulationDatum<RawDatum>>\n    let yForce: ForceY<PreSimulationDatum<RawDatum>>\n    if (axis === 'x') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n    } else if (axis === 'y') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n    } else {\n        throw new Error(`Invalid axis provided: ${axis}`)\n    }\n\n    return { x: xForce, y: yForce, collision: collisionForce }\n}\n\nexport const computeNodes = <RawDatum>({\n    data,\n    getId,\n    layout,\n    getValue,\n    valueScale,\n    getGroup,\n    ordinalScale,\n    getSize,\n    forces,\n    simulationIterations,\n    valueScaleConfig,\n}: {\n    data: RawDatum[]\n    getId: (datum: RawDatum) => string\n    layout: 'vertical' | 'horizontal'\n    getValue: (datum: RawDatum) => number | Date\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    getGroup: (datum: RawDatum) => string\n    ordinalScale: ScaleOrdinal<string, number>\n    getSize: (datum: RawDatum) => number\n    forces: SimulationForces<RawDatum>\n    simulationIterations: number\n    valueScaleConfig: ScaleLinearSpec | ScaleTimeSpec\n}) => {\n    const config = {\n        horizontal: ['x', 'y'],\n        vertical: ['y', 'x'],\n    }\n\n    const parseValue = getParsedValue(valueScaleConfig)\n\n    const simulatedNodes: PreSimulationDatum<RawDatum>[] = data.map(d => ({\n        id: getId(d),\n        group: getGroup(d),\n        value: parseValue(getValue(d)),\n        size: getSize(d),\n        data: { ...d },\n    }))\n\n    const simulation = forceSimulation<PreSimulationDatum<RawDatum>>(simulatedNodes)\n        .force('x', forces.x)\n        .force('y', forces.y)\n        .force('collide', forces.collision)\n        .stop()\n\n    simulation.tick(simulationIterations)\n\n    return {\n        [`${config[layout][0]}Scale`]: valueScale,\n        [`${config[layout][1]}Scale`]: ordinalScale,\n        nodes: simulation.nodes() as ComputedDatum<RawDatum>[],\n    }\n}\n","import { useCallback, useMemo } from 'react'\nimport { ScaleOrdinal } from 'd3-scale'\nimport { usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ScaleLinear, ScaleLinearSpec, ScaleTime, ScaleTimeSpec } from '@nivo/scales'\nimport {\n    computeValueScale,\n    computeOrdinalScale,\n    getSizeGenerator,\n    computeForces,\n    computeNodes,\n} from './compute'\nimport {\n    SwarmPlotCommonProps,\n    ComputedDatum,\n    SizeSpec,\n    SwarmPlotCustomLayerProps,\n    MouseHandlers,\n} from './types'\n\nexport const useValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) =>\n    useMemo(\n        () =>\n            computeValueScale<RawDatum>({\n                width,\n                height,\n                axis,\n                getValue,\n                scale,\n                data,\n            }),\n        [width, height, axis, getValue, scale, data]\n    )\n\nexport const useOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) =>\n    useMemo(\n        () => computeOrdinalScale({ width, height, axis, groups, gap }),\n        [width, height, axis, groups, gap]\n    )\n\nconst useSize = <RawDatum>(size: SizeSpec<RawDatum>) =>\n    useMemo(() => getSizeGenerator<RawDatum>(size), [size])\n\nexport const useForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}) =>\n    useMemo(\n        () =>\n            computeForces<RawDatum>({\n                axis,\n                valueScale,\n                ordinalScale,\n                spacing,\n                forceStrength,\n            }),\n        [axis, valueScale, ordinalScale, spacing, forceStrength]\n    )\n\nexport const useSwarmPlot = <RawDatum>({\n    data,\n    width,\n    height,\n    id,\n    value,\n    valueFormat,\n    valueScale: valueScaleConfig,\n    groups,\n    groupBy,\n    size,\n    spacing,\n    layout,\n    gap,\n    forceStrength,\n    simulationIterations,\n    colors,\n    colorBy,\n}: {\n    data: RawDatum[]\n    width: number\n    height: number\n    id: SwarmPlotCommonProps<RawDatum>['id']\n    value: SwarmPlotCommonProps<RawDatum>['value']\n    valueScale: SwarmPlotCommonProps<RawDatum>['valueScale']\n    valueFormat?: SwarmPlotCommonProps<RawDatum>['valueFormat']\n    groups: SwarmPlotCommonProps<RawDatum>['groups']\n    groupBy: SwarmPlotCommonProps<RawDatum>['groupBy']\n    size: SwarmPlotCommonProps<RawDatum>['size']\n    spacing: SwarmPlotCommonProps<RawDatum>['spacing']\n    layout: SwarmPlotCommonProps<RawDatum>['layout']\n    gap: SwarmPlotCommonProps<RawDatum>['gap']\n    forceStrength: SwarmPlotCommonProps<RawDatum>['forceStrength']\n    simulationIterations: SwarmPlotCommonProps<RawDatum>['simulationIterations']\n    colors: SwarmPlotCommonProps<RawDatum>['colors']\n    colorBy: SwarmPlotCommonProps<RawDatum>['colorBy']\n}) => {\n    const axis = layout === 'horizontal' ? 'x' : 'y'\n\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getGroup = usePropertyAccessor<RawDatum, string>(groupBy)\n    const getSize = useSize<RawDatum>(size)\n    const getColorId = usePropertyAccessor<Omit<ComputedDatum<RawDatum>, 'color'>, string>(colorBy)\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color'>>(\n        colors,\n        getColorId\n    )\n\n    const valueScale = useValueScale({\n        width,\n        height,\n        axis,\n        getValue,\n        scale: valueScaleConfig,\n        data,\n    })\n\n    const ordinalScale = useOrdinalScale({\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    })\n\n    const forces = useForces<RawDatum>({\n        axis,\n        valueScale,\n        ordinalScale,\n        spacing,\n        forceStrength,\n    })\n\n    const { nodes, xScale, yScale } = useMemo(\n        () =>\n            computeNodes<RawDatum>({\n                data,\n                getId,\n                layout,\n                getValue,\n                valueScale,\n                getGroup,\n                ordinalScale,\n                getSize,\n                forces,\n                simulationIterations,\n                valueScaleConfig,\n            }),\n        [\n            data,\n            getId,\n            layout,\n            getValue,\n            valueScale,\n            getGroup,\n            ordinalScale,\n            getSize,\n            forces,\n            simulationIterations,\n            valueScaleConfig,\n        ]\n    )\n\n    const augmentedNodes: ComputedDatum<RawDatum>[] = useMemo(\n        () =>\n            nodes.map(node => ({\n                ...node,\n                formattedValue: formatValue(node.value),\n                color: getColor(node),\n            })),\n        [nodes, formatValue, getColor]\n    )\n\n    return {\n        nodes: augmentedNodes,\n        xScale,\n        yScale,\n        getColor,\n    }\n}\n\nexport const useBorderWidth = <RawDatum>(\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n) =>\n    useMemo(() => {\n        if (typeof borderWidth === 'function') return borderWidth\n        return () => borderWidth\n    }, [borderWidth])\n\nexport const useNodeMouseHandlers = <RawDatum>({\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip,\n}: Pick<SwarmPlotCommonProps<RawDatum>, 'isInteractive' | 'tooltip'> & MouseHandlers<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const mouseEnterHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseEnter?.(node, event)\n        },\n        [isInteractive, onMouseEnter, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseMoveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseMove?.(node, event)\n        },\n        [isInteractive, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseLeaveHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [isInteractive, hideTooltip, onMouseLeave]\n    )\n\n    const clickHandler = useCallback(\n        (node, event) => {\n            if (!isInteractive) return\n\n            onClick?.(node, event)\n        },\n        [isInteractive, onClick]\n    )\n\n    return {\n        onMouseEnter: mouseEnterHandler,\n        onMouseMove: mouseMoveHandler,\n        onMouseLeave: mouseLeaveHandler,\n        onClick: clickHandler,\n    }\n}\n\nconst getNodeAnnotationPosition = (node: ComputedDatum<unknown>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = (node: ComputedDatum<unknown>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useSwarmPlotAnnotations = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    annotations: AnnotationMatcher<ComputedDatum<RawDatum>>[]\n) =>\n    useAnnotations<ComputedDatum<RawDatum>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n\nexport const useSwarmPlotLayerContext = <\n    RawDatum,\n    Scale extends\n        | ScaleLinear<number>\n        | ScaleTime<string | Date>\n        | ScaleOrdinal<string, number, never>\n>({\n    nodes,\n    xScale,\n    yScale,\n    innerWidth,\n    innerHeight,\n    outerWidth,\n    outerHeight,\n    margin,\n}: SwarmPlotCustomLayerProps<RawDatum, Scale>): SwarmPlotCustomLayerProps<RawDatum, Scale> =>\n    useMemo(\n        () => ({\n            nodes,\n            xScale,\n            yScale,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n        }),\n        [nodes, xScale, yScale, innerWidth, innerHeight, outerWidth, outerHeight, margin]\n    )\n","import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, SwarmPlotCommonProps } from './types'\nimport { useBorderWidth } from './hooks'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n    borderColor: SwarmPlotCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: SwarmPlotCommonProps<RawDatum>['isInteractive']\n    tooltip: SwarmPlotCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.size / 2,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderWidth = useBorderWidth<RawDatum>(borderWidth)\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth: getBorderWidth(node),\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={event => onMouseEnter?.(node, event)}\n            onMouseMove={event => onMouseMove?.(node, event)}\n            onMouseLeave={event => onMouseLeave?.(node, event)}\n            onClick={event => onClick?.(node, event)}\n        />\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedDatum, SwarmPlotSvgProps } from './types'\nimport { useSwarmPlotAnnotations } from './hooks'\n\nexport const SwarmPlotAnnotations = <RawDatum,>({\n    nodes,\n    annotations,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    annotations: SwarmPlotSvgProps<RawDatum>['annotations']\n}) => {\n    const boundAnnotations = useSwarmPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { Axes, Grid } from '@nivo/axes'\nimport { Mesh } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotLayerId, SwarmPlotSvgProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot, useSwarmPlotLayerContext, useNodeMouseHandlers } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { SwarmPlotAnnotations } from './SwarmPlotAnnotations'\n\ntype InnerSwarmPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotSvgProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSwarmPlot = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueScale = defaultProps.valueScale,\n    valueFormat,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    circleComponent = CircleSvg,\n    useMesh = defaultProps.useMesh,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    annotations = defaultProps.annotations,\n    role = defaultProps.role,\n}: InnerSwarmPlotProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...props } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const xScale = props.xScale as Exclude<typeof props.xScale, ComputedDatum<RawDatum>[]>\n    const yScale = props.yScale as Exclude<typeof props.yScale, ComputedDatum<RawDatum>[]>\n\n    const handlers = useNodeMouseHandlers({\n        isInteractive,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n        tooltip,\n    })\n\n    const layerById: Record<SwarmPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        circles: null,\n        annotations: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as AnyScale) : null}\n                xValues={gridXValues}\n                yScale={enableGridY ? (yScale as AnyScale) : null}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as AnyScale}\n                yScale={yScale as AnyScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop ?? undefined}\n                right={axisRight ?? undefined}\n                bottom={axisBottom ?? undefined}\n                left={axisLeft ?? undefined}\n            />\n        )\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={nodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                component={circleComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <SwarmPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={handlers.onMouseEnter}\n                onMouseMove={handlers.onMouseMove}\n                onMouseLeave={handlers.onMouseLeave}\n                onClick={handlers.onClick}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    const layerContext = useSwarmPlotLayerContext({\n        nodes,\n        xScale,\n        yScale,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as SwarmPlotLayerId] !== undefined) {\n                    return layerById[layer as SwarmPlotLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const SwarmPlot = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotSvgProps } from './types'\nimport { SwarmPlot } from './SwarmPlot'\n\ntype ResponsiveSwarmPlotProps<RawDatum> = Partial<\n    Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlot = <RawDatum,>(props: ResponsiveSwarmPlotProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlot<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport isNumber from 'lodash/isNumber'\nimport { Container, getRelativeCursor, isCursorInRect, useDimensions, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotCanvasProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot } from './hooks'\n\nexport const renderCircleDefault = <RawDatum,>(\n    ctx: CanvasRenderingContext2D,\n    {\n        node,\n        getBorderWidth,\n        getBorderColor,\n    }: {\n        node: ComputedDatum<RawDatum>\n        getBorderWidth: (node: ComputedDatum<RawDatum>) => number\n        getBorderColor: (node: ComputedDatum<RawDatum>) => string\n    }\n) => {\n    const nodeBorderWidth = getBorderWidth(node)\n    if (nodeBorderWidth > 0) {\n        ctx.strokeStyle = getBorderColor(node)\n        ctx.lineWidth = nodeBorderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n\n    if (nodeBorderWidth > 0) {\n        ctx.stroke()\n    }\n}\n\ntype InnerSwarmCanvasPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotCanvasProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerSwarmPlotCanvas = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    valueScale = defaultProps.valueScale,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    renderCircle = renderCircleDefault,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerSwarmCanvasPlotProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ComputedDatum<RawDatum> | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...scales } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const { xScale, yScale } = scales as Record<'xScale' | 'yScale', AnyScale>\n\n    const { delaunay, voronoi } = useVoronoiMesh<ComputedDatum<RawDatum>>({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getBorderWidth = () => 1\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        if (!ctx) return\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (\n                layer === 'grid' &&\n                isNumber(theme.grid.line.strokeWidth) &&\n                theme.grid.line.strokeWidth > 0\n            ) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'circles') {\n                nodes.forEach(node => {\n                    renderCircle(ctx, {\n                        node,\n                        getBorderWidth,\n                        getBorderColor,\n                    })\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh && voronoi) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentNode) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                }\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        pixelRatio,\n        margin,\n        theme,\n        layers,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        voronoi,\n        debugMesh,\n        currentNode,\n        nodes,\n        renderCircle,\n        getBorderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: React.MouseEvent) => {\n            if (!canvasEl.current) {\n                return null\n            }\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) {\n                return null\n            }\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showNodeTooltip = useCallback(\n        (node: ComputedDatum<RawDatum>, event: React.MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                onMouseMove?.(node, event)\n                showNodeTooltip(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, setCurrentNode, onMouseMove, showNodeTooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrentNode(null)\n    }, [hideTooltip, setCurrentNode])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const SwarmPlotCanvas = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlotCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotCanvasProps } from './types'\nimport { SwarmPlotCanvas } from './SwarmPlotCanvas'\n\ntype ResponsiveSwarmPlotCanvasProps<RawDatum> = Partial<\n    Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlotCanvas = <RawDatum,>(\n    props: ResponsiveSwarmPlotCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["SwarmPlotTooltip","id","formattedValue","color","_jsx","BasicTooltip","value","enableChip","defaultProps","valueScale","type","min","max","groupBy","size","spacing","layout","gap","forceStrength","simulationIterations","colors","scheme","colorBy","borderWidth","borderColor","layers","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","isInteractive","useMesh","debugMesh","tooltip","animate","motionConfig","annotations","role","pixelRatio","window","devicePixelRatio","computeOrdinalScale","width","height","axis","groups","Array","isArray","length","Error","groupSize","groupCount","range","map","_","i","scaleOrdinal","domain","computeValueScale","getValue","scale","values","data","series","x","y","axes","generateSeriesAxis","computeScale","Math","all","getSizeGenerator","isNumber","isPlainObject","isString","key","sizes","sizeScale","scaleLinear","d","get","computeForces","xForce","yForce","ordinalScale","collisionForce","forceCollide","forceX","strength","forceY","group","collision","computeNodes","scaleSpec","getId","getGroup","getSize","forces","valueScaleConfig","config","horizontal","vertical","parseValue","format","createDateNormalizer","simulatedNodes","simulation","forceSimulation","force","stop","tick","nodes","useValueScale","useMemo","useOrdinalScale","useForces","useSwarmPlot","valueFormat","usePropertyAccessor","formatValue","useValueFormatter","useSize","getColorId","getColor","useOrdinalColorScale","xScale","yScale","node","useBorderWidth","useNodeMouseHandlers","onClick","onMouseEnter","onMouseLeave","onMouseMove","useTooltip","showTooltipFromEvent","hideTooltip","useCallback","event","getNodeAnnotationPosition","getNodeAnnotationDimensions","useSwarmPlotAnnotations","useAnnotations","getPosition","getDimensions","useSwarmPlotLayerContext","innerWidth","innerHeight","outerWidth","outerHeight","margin","Circles","component","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","handleClick","useMotionConfig","springConfig","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","transitionPhases","enter","radius","opacity","update","leave","getTransitionPhases","transition","useTransition","keys","initial","from","immediate","transitionProps","React","style","radiusValue","to","CircleSvg","animated","circle","cx","cy","r","fill","stroke","strokeWidth","SwarmPlotAnnotations","boundAnnotations","annotation","Annotation","InnerSwarmPlot","partialMargin","circleComponent","gridXValues","gridYValues","useDimensions","props","handlers","layerById","grid","circles","mesh","includes","Grid","xValues","yValues","Axes","top","undefined","right","bottom","left","Mesh","debug","layerContext","SvgWrapper","layer","Fragment","SwarmPlot","renderWrapper","otherProps","Container","ResponsiveSwarmPlot","ResponsiveWrapper","renderCircleDefault","ctx","nodeBorderWidth","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","InnerSwarmPlotCanvas","renderCircle","canvasEl","useRef","useState","currentNode","setCurrentNode","useVoronoiMesh","points","delaunay","voronoi","useEffect","current","getContext","background","fillRect","save","translate","forEach","line","renderGridLinesToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","index","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","find","showNodeTooltip","handleMouseHover","ref","cursor","SwarmPlotCanvas","ResponsiveSwarmPlotCanvas"],"mappings":"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"}