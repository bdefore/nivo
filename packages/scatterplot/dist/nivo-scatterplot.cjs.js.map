{"version":3,"file":"nivo-scatterplot.cjs.js","sources":["../src/compute.ts","../src/hooks.ts","../src/Node.tsx","../src/props.tsx","../src/Tooltip.tsx","../src/ScatterPlotAnnotations.tsx","../src/Nodes.tsx","../src/Mesh.tsx","../src/ScatterPlot.tsx","../src/ScatterPlotCanvas.tsx","../src/ResponsiveScatterPlot.tsx","../src/ResponsiveScatterPlotCanvas.tsx"],"sourcesContent":["import get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n","import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n","import { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\nimport { useCallback } from 'react'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(event => onMouseEnter?.(node, event), [node, onMouseEnter])\n    const handleMouseMove = useCallback(event => onMouseMove?.(node, event), [node, onMouseMove])\n    const handleMouseLeave = useCallback(event => onMouseLeave?.(node, event), [node, onMouseLeave])\n    const handleClick = useCallback(event => onClick?.(node, event), [node, onClick])\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\nimport { createElement, useCallback } from 'react'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node, event) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback((node, event) => onClick?.(node, event), [onClick])\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useRef, useState, useEffect, useCallback, useMemo } from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProps, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale as any,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale as any,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProps<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProps<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProps<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProps<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n        boundAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        event => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: ScatterPlotCanvasProps<RawDatum>) => (\n    <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n        <InnerScatterPlotCanvas<RawDatum> {...props} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <ScatterPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["getNodeSizeGenerator","size","isNumber","isPlainObject","isDynamicSizeSpec","isString","key","Error","Array","isArray","values","length","sizes","sizeScale","scaleLinear","domain","range","datum","get","useScatterPlot","data","xScaleSpec","xFormat","yScaleSpec","yFormat","width","height","nodeId","nodeSize","colors","useMemo","computeXYScalesForSeries","series","xScale","yScale","formatX","useValueFormatter","formatY","getNodeId","usePropertyAccessor","rawNodes","points","forEach","serie","d","serieIndex","point","index","serieId","id","x","position","xValue","formattedX","y","yValue","formattedY","push","computePoints","getNodeSize","getColor","useOrdinalColorScale","nodes","map","rawNode","color","legendData","label","useScatterPlotAnnotations","items","annotations","useAnnotations","getPosition","node","getDimensions","interpolateRadius","commonDefaultProps","type","min","max","enableGridX","enableGridY","axisBottom","axisLeft","nodeComponent","style","blendMode","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","handleMouseEnter","useCallback","event","handleMouseMove","handleMouseLeave","handleClick","_jsx","animated","circle","cx","cy","r","to","fill","mixBlendMode","undefined","scheme","debugMesh","tooltip","BasicTooltip","value","enableChip","markers","legends","svgDefaultProps","layers","role","useMesh","animate","motionConfig","canvasDefaultProps","pixelRatio","window","devicePixelRatio","renderNode","ctx","beginPath","arc","Math","PI","fillStyle","ScatterPlotAnnotations","boundAnnotations","annotation","i","Annotation","getNodeKey","regularTransition","leaveTransition","Nodes","useMotionConfig","springConfig","config","transition","useTransition","keys","from","enter","update","leave","immediate","useTooltip","showTooltipFromEvent","hideTooltip","createElement","Mesh","debug","BaseMesh","InnerScatterPlot","partialMargin","margin","gridXValues","gridYValues","axisTop","axisRight","ariaLabel","ariaLabelledBy","ariaDescribedBy","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","customLayerProps","layerById","grid","axes","mesh","includes","Grid","xValues","yValues","Axes","top","right","bottom","left","CartesianMarkers","legend","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Fragment","ScatterPlot","theme","renderWrapper","otherProps","Container","InnerScatterPlotCanvas","canvasEl","useRef","useTheme","useState","currentNode","setCurrentNode","useVoronoiMesh","delaunay","voronoi","useEffect","current","getContext","scale","background","fillRect","translate","lineWidth","line","strokeWidth","strokeStyle","stroke","renderGridLinesToCanvas","axis","renderAnnotationsToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getNodeFromMouseEvent","getRelativeCursor","isCursorInRect","nodeIndex","find","handleMouseHover","ref","cursor","ScatterPlotCanvas","props","ResponsiveWrapper"],"mappings":"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"}